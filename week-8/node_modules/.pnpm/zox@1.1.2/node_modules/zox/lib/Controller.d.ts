/// <reference types="node" />
import { IncomingMessage } from "http";
import { IResponse } from "./Responses/IResponse";
import { ParsedUrlQuery } from "querystring";
import { RouteParams } from "./RoutingUtility";
import { IRenderable } from "./Renderable/Renderable";
import { IServiceContainer } from "./ServiceContainer";
export declare type MaybePromise<T> = T | Promise<T>;
export interface IController {
    params?: RouteParams;
    query?: ParsedUrlQuery;
    handle(request: IncomingMessage): MaybePromise<IResponse>;
}
export declare abstract class JsonController implements IController {
    protected maxBodySize?: number;
    handle(request: IncomingMessage): MaybePromise<IResponse>;
    abstract handleJson(request: IncomingMessage, json: any): MaybePromise<IResponse>;
    handleInvalidRequest(request: IncomingMessage, reason: string): MaybePromise<IResponse>;
}
export declare abstract class PageController implements IController {
    protected container: IServiceContainer;
    handle(request: IncomingMessage): MaybePromise<IResponse>;
    abstract page(request: IncomingMessage): MaybePromise<IRenderable>;
}
export declare abstract class FormController implements IController {
    protected maxBodySize?: number;
    handle(request: IncomingMessage): MaybePromise<IResponse>;
    abstract handleForm(request: IncomingMessage, form: any): MaybePromise<IResponse>;
    handleInvalidForm(request: IncomingMessage, reason: string): MaybePromise<IResponse>;
}
export declare abstract class FormPageController implements IController {
    protected container: IServiceContainer;
    protected maxBodySize?: number;
    handle(request: IncomingMessage): MaybePromise<IResponse>;
    abstract page(request: IncomingMessage, form?: any, error?: string): MaybePromise<IRenderable>;
}
