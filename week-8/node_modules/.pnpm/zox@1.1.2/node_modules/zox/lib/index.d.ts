/// <reference types="node" />
import * as http from "http";
import * as WebSocket from "ws";
import { Constructor, PluginDiscovery } from "zox-plugins";
import { IServiceContainer, ServiceContainer } from "./ServiceContainer";
import { IWebServer } from "./Plugins/Services/WebServer";
import { IWebSocketControllerManager } from "./Plugins/Services/WebSocketControllerManager";
import { IController } from "./Controller";
export declare type BootstrapOptions = {
    log?: boolean;
    config?: {
        defaultsPath?: string;
        overridesPath?: string;
        useCache?: boolean;
        warnIfMissing?: boolean;
    };
    node_modules?: boolean;
    staticPages?: boolean;
    graphql?: boolean;
    projectPlugins?: boolean;
    middleware?: boolean;
    scanner?: (pd: PluginDiscovery) => Promise<void>;
    forceResolve?: boolean;
    defaultController?: Constructor<IController>;
};
export declare function bootstrap(options?: BootstrapOptions): Promise<ServiceContainer>;
export declare function startServer(container: IServiceContainer, port?: number): http.Server;
export declare function startWebServer(container: IServiceContainer, port?: number): http.Server;
export declare function startWebSocketServer(container: IServiceContainer, port?: number): http.Server;
export declare function setupRequestHandler(server: http.Server, webServer: IWebServer): void;
export declare function setupWebSocketHandler(server: http.Server, webSocketControllerManager: IWebSocketControllerManager): WebSocket.Server;
