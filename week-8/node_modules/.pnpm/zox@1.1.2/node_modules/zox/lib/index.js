"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const path = require("path");
const WebSocket = require("ws");
const zox_plugins_1 = require("zox-plugins");
const PluginDiscoveryService_1 = require("./Services/PluginDiscoveryService");
const ServiceContainer_1 = require("./ServiceContainer");
const ServicePluginManager_1 = require("./PluginManagers/ServicePluginManager");
const WebServer_1 = require("./Plugins/Services/WebServer");
const ControllerResolverPluginManager_1 = require("./Plugins/PluginManagers/ControllerResolverPluginManager");
const DefaultController_1 = require("./DefaultController");
const WebSocketControllerManager_1 = require("./Plugins/Services/WebSocketControllerManager");
const ConfigService_1 = require("./Services/ConfigService");
const MiddlewarePluginManager_1 = require("./Plugins/PluginManagers/MiddlewarePluginManager");
async function bootstrap(options) {
    options = options || {};
    options.log = options.log !== false;
    if (options.defaultController === undefined) {
        options.defaultController = DefaultController_1.DefaultController;
    }
    if (options.log)
        console.log('Loading Plugins...');
    const pluginDiscovery = new zox_plugins_1.PluginDiscovery();
    const relativeToCwd = path.relative(process.cwd(), __dirname);
    if (options.node_modules) {
        await pluginDiscovery.scanNodeModules();
    }
    else {
        await pluginDiscovery.scanProject(path.join(relativeToCwd, '..'));
    }
    if (options.staticPages) {
        await pluginDiscovery.scanDirectory(path.join(relativeToCwd, 'OptionalPlugins/StaticPages'));
    }
    if (options.graphql) {
        await pluginDiscovery.scanDirectory(path.join(relativeToCwd, 'OptionalPlugins/GraphQL'));
    }
    if (options.projectPlugins) {
        await pluginDiscovery.scanProject();
    }
    if (options.scanner) {
        await options.scanner(pluginDiscovery);
    }
    const container = new ServiceContainer_1.ServiceContainer();
    container.registerAs(PluginDiscoveryService_1.IPluginDiscoveryService, pluginDiscovery);
    if (options.log)
        console.log('Initializing...');
    container.registerUnresolved(new ConfigService_1.ConfigService(options.config));
    container.create(ServicePluginManager_1.ServicePluginManager).registerServices(options.forceResolve !== false);
    if (options.defaultController) {
        container.get(ControllerResolverPluginManager_1.IControllerResolverPluginManager).defaultController = options.defaultController;
    }
    if (options.middleware) {
        await container.get(MiddlewarePluginManager_1.IMiddlewarePluginManager).resolve();
    }
    return container;
}
exports.bootstrap = bootstrap;
function startServer(container, port = 8080) {
    const server = http.createServer();
    setupRequestHandler(server, container.get(WebServer_1.IWebServer));
    setupWebSocketHandler(server, container.get(WebSocketControllerManager_1.IWebSocketControllerManager));
    server.listen(port);
    return server;
}
exports.startServer = startServer;
function startWebServer(container, port = 8080) {
    const server = http.createServer();
    setupRequestHandler(server, container.get(WebServer_1.IWebServer));
    server.listen(port);
    return server;
}
exports.startWebServer = startWebServer;
function startWebSocketServer(container, port = 8080) {
    const server = http.createServer();
    setupWebSocketHandler(server, container.get(WebSocketControllerManager_1.IWebSocketControllerManager));
    server.listen(port);
    return server;
}
exports.startWebSocketServer = startWebSocketServer;
function setupRequestHandler(server, webServer) {
    server.on('request', webServer.handleRequestBound);
}
exports.setupRequestHandler = setupRequestHandler;
function setupWebSocketHandler(server, webSocketControllerManager) {
    const wsServer = new WebSocket.Server({
        noServer: true,
        perMessageDeflate: false,
    });
    server.on('upgrade', (request, socket, head) => {
        if (request.headers.upgrade === 'websocket') {
            const controller = webSocketControllerManager.getController(request.url);
            if (controller && (!controller.validate || controller.validate(request))) {
                wsServer.handleUpgrade(request, socket, head, (ws) => {
                    controller.handle(request, ws);
                });
            }
            else {
                socket.end();
            }
        }
        else {
            socket.end();
        }
    });
    return wsServer;
}
exports.setupWebSocketHandler = setupWebSocketHandler;
//# sourceMappingURL=index.js.map