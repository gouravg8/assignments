/// <reference types="node" />
import { IService, IServiceContainer } from "../../ServiceContainer";
import { IPluginDiscoveryService } from "../../Services/PluginDiscoveryService";
import { IncomingMessage, ServerResponse } from "http";
import { Constructor } from "zox-plugins";
import { MaybePromise } from "../../Controller";
export declare type MiddlewareFunc = (request: IncomingMessage, response: ServerResponse) => MaybePromise<boolean | void>;
export interface IMiddlewareResolver {
    resolve(): MaybePromise<MiddlewareFunc>;
}
export declare abstract class IMiddlewarePluginManager implements IService {
    readonly serviceKey: symbol;
    abstract readonly hasMiddleware: boolean;
    abstract resolve(): Promise<void>;
    abstract execMiddleware(request: IncomingMessage, response: ServerResponse): Promise<boolean | void>;
}
export declare class MiddlewarePluginManager extends IMiddlewarePluginManager {
    protected container: IServiceContainer;
    protected pluginDiscovery: IPluginDiscoveryService;
    private middleware;
    readonly hasMiddleware: boolean;
    resolve(): Promise<void>;
    execMiddleware(request: IncomingMessage, response: ServerResponse): Promise<boolean | void>;
}
export declare function isMiddlewareClass(obj: any): obj is Constructor<IMiddlewareResolver>;
export declare const Middleware: (plugin: Constructor<IMiddlewareResolver> | MiddlewareFunc) => void;
