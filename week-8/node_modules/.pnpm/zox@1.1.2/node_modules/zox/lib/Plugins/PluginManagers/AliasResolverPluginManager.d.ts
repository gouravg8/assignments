/// <reference types="node" />
import { IOnResolved, IService, IServiceContainer } from "../../ServiceContainer";
import { Constructor } from "zox-plugins";
import { UrlWithParsedQuery } from "url";
import { IPluginDiscoveryService } from "../../Services/PluginDiscoveryService";
export interface IAliasResolver {
    tryResolveAlias(url: UrlWithParsedQuery, tokens: Array<string>): string | void;
}
export declare abstract class IAliasResolverService implements IService, IAliasResolver {
    readonly serviceKey: symbol;
    abstract tryResolveAlias(url: UrlWithParsedQuery, tokens: Array<string>): string | void;
}
export declare class AliasResolverPluginManager extends IAliasResolverService implements IOnResolved {
    protected container: IServiceContainer;
    protected pluginDiscovery: IPluginDiscoveryService;
    private resolvers;
    onResolved(): void;
    tryResolveAlias(url: UrlWithParsedQuery, tokens: Array<string>): string | undefined;
}
export declare const AliasResolver: (pluginClass: Constructor<IAliasResolver>) => void;
