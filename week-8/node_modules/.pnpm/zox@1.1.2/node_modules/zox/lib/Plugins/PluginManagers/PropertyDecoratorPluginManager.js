"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceContainer_1 = require("../../ServiceContainer");
const ServicePluginManager_1 = require("../../PluginManagers/ServicePluginManager");
const PluginDiscoveryService_1 = require("../../Services/PluginDiscoveryService");
const zox_plugins_1 = require("zox-plugins");
const serviceKey = Symbol('Property Decorator');
const pluginKey = Symbol('Property Decorator');
class IPropertyDecoratorPluginManager {
    get serviceKey() {
        return serviceKey;
    }
}
exports.IPropertyDecoratorPluginManager = IPropertyDecoratorPluginManager;
let PropertyDecoratorPluginManager = class PropertyDecoratorPluginManager extends IPropertyDecoratorPluginManager {
    constructor() {
        super(...arguments);
        this.decorators = {};
    }
    onResolved() {
        const pluginDefinitions = this.pluginDiscovery.getPlugins(pluginKey);
        for (const pluginDefinition of pluginDefinitions) {
            this.decorators[pluginDefinition.data] = this.container.create(pluginDefinition.pluginClass);
        }
    }
    decorateProperties(obj) {
        const keys = Object.keys(obj);
        for (const key of keys) {
            let property = obj[key];
            if (key.includes('.')) {
                const parts = key.split('.');
                const resultKey = parts[0];
                if (keys.indexOf(resultKey) == -1) {
                    for (let i = 1; i < parts.length; ++i) {
                        const decorator = parts[i];
                        if (decorator in this.decorators) {
                            property = this.decorators[decorator].decorate(property);
                        }
                        else {
                            console.warn('Unknown property decorator:', decorator);
                        }
                    }
                    obj[resultKey] = property;
                    obj[key] = undefined;
                }
            }
            if (property != null && typeof property == 'object') {
                this.decorateProperties(property);
            }
        }
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], PropertyDecoratorPluginManager.prototype, "container", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", PluginDiscoveryService_1.IPluginDiscoveryService)
], PropertyDecoratorPluginManager.prototype, "pluginDiscovery", void 0);
PropertyDecoratorPluginManager = __decorate([
    ServicePluginManager_1.Service
], PropertyDecoratorPluginManager);
exports.PropertyDecoratorPluginManager = PropertyDecoratorPluginManager;
function PropertyDecorator(decorator) {
    return zox_plugins_1.PluginSetup(pluginKey, decorator);
}
exports.PropertyDecorator = PropertyDecorator;
//# sourceMappingURL=PropertyDecoratorPluginManager.js.map