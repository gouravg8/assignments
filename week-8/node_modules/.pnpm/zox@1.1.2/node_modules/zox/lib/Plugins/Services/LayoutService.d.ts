import { IOnResolved, IService, IServiceContainer } from "../../ServiceContainer";
import { IRenderable } from "../../Renderable/Renderable";
import { IConfigService } from "../../Services/ConfigService";
import { IBlockPluginManager } from "../PluginManagers/BlockPluginManager";
import { IPropertyDecoratorPluginManager } from "../PluginManagers/PropertyDecoratorPluginManager";
export declare type SiteConfig = {
    siteName?: string;
    favicon?: string;
    lang?: string;
};
export declare type BlocksConfig = {
    [region: string]: Array<string>;
};
export declare type BlocksDataConfig = {
    directory: string;
};
export declare type LibraryOptions = {
    scripts?: Array<{
        src?: string;
        head?: boolean;
        attrs?: {
            [attr: string]: string | null;
        };
    }>;
    styles?: Array<{
        href?: string;
        attrs?: {
            [attr: string]: string | null;
        };
    }>;
};
export declare type LibraryConfig = {
    [library: string]: LibraryOptions;
};
export declare abstract class ILayoutService implements IService {
    readonly serviceKey: symbol;
    abstract wrap(renderable: IRenderable): IRenderable;
}
export declare class LayoutService extends ILayoutService implements IOnResolved {
    protected container: IServiceContainer;
    protected config: IConfigService;
    protected blockPluginManager: IBlockPluginManager;
    protected propertyDecoratorPluginManager: IPropertyDecoratorPluginManager;
    private globalConfig;
    private siteConfig;
    private blocksConfig;
    private blocksDataConfig;
    private libraryConfig;
    private blocks;
    onResolved(): void;
    wrap(content: IRenderable): IRenderable;
}
