"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceContainer_1 = require("../../ServiceContainer");
const ServicePluginManager_1 = require("../../PluginManagers/ServicePluginManager");
const PluginDiscoveryService_1 = require("../../Services/PluginDiscoveryService");
const zox_plugins_1 = require("zox-plugins");
const serviceKey = Symbol('Controller Extensions');
const pluginKey = Symbol('Controller Extensions');
class IControllerPreparationPluginManager {
    get serviceKey() {
        return serviceKey;
    }
}
exports.IControllerPreparationPluginManager = IControllerPreparationPluginManager;
let ControllerExtensionsPluginManager = class ControllerExtensionsPluginManager extends IControllerPreparationPluginManager {
    constructor() {
        super(...arguments);
        this.extensions = [];
    }
    hasMiddleware(controller) {
        return !!this.extensions.length;
    }
    async resolve() {
        this.extensions.length = 0;
        const pluginDefinitions = this.pluginDiscovery.getPlugins(pluginKey);
        for (const pluginDefinition of pluginDefinitions) {
            if (isControllerMiddlewareClass(pluginDefinition.pluginClass)) {
                this.extensions.push(await this.container.create(pluginDefinition.pluginClass).resolve());
            }
            else {
                this.extensions.push(pluginDefinition.pluginClass);
            }
        }
    }
    async execMiddleware(request, response) {
        for (const extension of this.extensions) {
            try {
                const res = await extension(request, response);
                if (res !== undefined) {
                    return true;
                }
            }
            catch (e) {
                console.error('Middleware error:', e);
                response.writeHead(500);
                response.end();
                return true;
            }
        }
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], ControllerExtensionsPluginManager.prototype, "container", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", PluginDiscoveryService_1.IPluginDiscoveryService)
], ControllerExtensionsPluginManager.prototype, "pluginDiscovery", void 0);
ControllerExtensionsPluginManager = __decorate([
    ServicePluginManager_1.Service
], ControllerExtensionsPluginManager);
exports.ControllerExtensionsPluginManager = ControllerExtensionsPluginManager;
function isControllerMiddlewareClass(obj) {
    return obj.prototype && typeof obj.prototype.resolve === 'function';
}
exports.isControllerMiddlewareClass = isControllerMiddlewareClass;
exports.ControllerMiddleware = zox_plugins_1.PluginSetup(pluginKey);
//# sourceMappingURL=ControllerExtensionPluginManager.js.map