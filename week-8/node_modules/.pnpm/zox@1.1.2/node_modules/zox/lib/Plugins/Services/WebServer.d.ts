/// <reference types="node" />
import { IncomingMessage, ServerResponse } from "http";
import { IOnResolved, IService } from "../../ServiceContainer";
import { IConfigService } from "../../Services/ConfigService";
import { IControllerResolverPluginManager } from "../PluginManagers/ControllerResolverPluginManager";
import { IMiddlewarePluginManager } from "../PluginManagers/MiddlewarePluginManager";
export declare type ServerConfig = {
    publicFiles?: string | Array<string>;
    trustedHosts?: Array<string>;
};
export declare abstract class IWebServer implements IService {
    readonly serviceKey: symbol;
    abstract readonly handleRequestBound: (request: IncomingMessage, response: ServerResponse) => Promise<void>;
    abstract handleRequest(request: IncomingMessage, response: ServerResponse): Promise<void>;
}
export declare class WebServer extends IWebServer implements IOnResolved {
    protected config: IConfigService;
    protected middlewarePluginManager: IMiddlewarePluginManager;
    protected controllerResolverPluginManager: IControllerResolverPluginManager;
    private trustedHosts;
    onResolved(): void;
    readonly handleRequestBound: (request: IncomingMessage, response: ServerResponse) => Promise<void>;
    handleRequest(request: IncomingMessage, response: ServerResponse): Promise<void>;
}
