import { IOnResolved, IService } from "../../ServiceContainer";
import { IConfigService } from "../../Services/ConfigService";
import { IRenderEnginePluginManager } from "../PluginManagers/RenderEnginePluginManager";
export declare abstract class IRenderService implements IService {
    readonly serviceKey: symbol;
    abstract render(templateCandidates: Array<string>, data: any): string;
}
export declare class RenderService extends IRenderService implements IOnResolved {
    protected config: IConfigService;
    protected renderEnginePluginManager: IRenderEnginePluginManager;
    private renderEngineInfoList;
    private directory;
    private compileCache;
    private templateListCache;
    private debug;
    onResolved(): void;
    render(templateCandidates: Array<string>, data: any): string;
    private resolveTemplate;
}
