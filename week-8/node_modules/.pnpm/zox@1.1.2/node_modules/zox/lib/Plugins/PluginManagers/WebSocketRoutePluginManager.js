"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceContainer_1 = require("../../ServiceContainer");
const ServicePluginManager_1 = require("../../PluginManagers/ServicePluginManager");
const zox_plugins_1 = require("zox-plugins");
const RoutingUtility_1 = require("../../RoutingUtility");
const PluginDiscoveryService_1 = require("../../Services/PluginDiscoveryService");
const serviceKey = Symbol('Web Socket Route Manager');
const pluginKey = Symbol('web.socket.route');
class IWebSocketRoutePluginManager {
    get serviceKey() {
        return serviceKey;
    }
}
exports.IWebSocketRoutePluginManager = IWebSocketRoutePluginManager;
let WebSocketRoutePluginManager = class WebSocketRoutePluginManager extends IWebSocketRoutePluginManager {
    getControllersData() {
        const pluginDefinitions = this.pluginDiscovery.getPlugins(pluginKey);
        const plugins = [];
        for (const pluginDefinition of pluginDefinitions) {
            plugins.push({
                handler: pluginDefinition.pluginClass,
                tokens: RoutingUtility_1.routeTokens(pluginDefinition.data),
            });
        }
        return plugins;
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", PluginDiscoveryService_1.IPluginDiscoveryService)
], WebSocketRoutePluginManager.prototype, "pluginDiscovery", void 0);
WebSocketRoutePluginManager = __decorate([
    ServicePluginManager_1.Service
], WebSocketRoutePluginManager);
exports.WebSocketRoutePluginManager = WebSocketRoutePluginManager;
function WebSocketRoute(route) {
    return zox_plugins_1.PluginSetup(pluginKey, route);
}
exports.WebSocketRoute = WebSocketRoute;
//# sourceMappingURL=WebSocketRoutePluginManager.js.map