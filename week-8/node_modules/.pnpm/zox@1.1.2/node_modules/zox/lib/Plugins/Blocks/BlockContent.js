"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const RenderableBlock_1 = require("../../Renderable/Layout/RenderableBlock");
const BlockPluginManager_1 = require("../PluginManagers/BlockPluginManager");
let BlockContent = class BlockContent extends RenderableBlock_1.RenderableBlock {
    constructor(block, content, settings) {
        super(block, content, settings);
        this.content = content;
    }
    templateCandidates() {
        const candidates = super.templateCandidates();
        if (this.content.type !== undefined) {
            candidates.push('block-' + this.block + '-' + this.content.type);
        }
        return candidates;
    }
};
BlockContent = __decorate([
    BlockPluginManager_1.Block({
        name: 'content'
    }),
    __metadata("design:paramtypes", [String, Object, Object])
], BlockContent);
exports.BlockContent = BlockContent;
let BlockPureContent = class BlockPureContent {
    constructor(block, content) {
        this.content = content;
    }
    toString() {
        return this.content.toString();
    }
};
BlockPureContent = __decorate([
    BlockPluginManager_1.Block({
        name: 'pure-content'
    }),
    __metadata("design:paramtypes", [String, Object])
], BlockPureContent);
exports.BlockPureContent = BlockPureContent;
//# sourceMappingURL=BlockContent.js.map