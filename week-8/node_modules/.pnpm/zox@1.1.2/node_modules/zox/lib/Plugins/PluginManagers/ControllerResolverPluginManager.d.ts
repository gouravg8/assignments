/// <reference types="node" />
import { IOnResolved, IService, IServiceContainer } from "../../ServiceContainer";
import { Constructor } from "zox-plugins";
import { IController, MaybePromise } from "../../Controller";
import { IPluginDiscoveryService } from "../../Services/PluginDiscoveryService";
import { UrlWithParsedQuery } from "url";
import { RouteParams } from "../../RoutingUtility";
import { IAliasResolverService } from "./AliasResolverPluginManager";
import { IncomingMessage } from "http";
import { IResponse } from "../../Responses/IResponse";
import { ParsedUrlQuery } from "querystring";
export declare type ControllerFuncThis = {
    container: IServiceContainer;
    params?: RouteParams;
    query?: ParsedUrlQuery;
};
export declare type ControllerFunc = (this: void | ControllerFuncThis, request: IncomingMessage) => MaybePromise<IResponse>;
export declare type ControllerType = Constructor<IController> | ControllerFunc;
export interface IControllerResolver {
    tryResolveController(method: string, parsedUrl: UrlWithParsedQuery, tokens: Array<string>): IController | ControllerFunc | void;
}
export declare abstract class IControllerResolverPluginManager implements IService {
    readonly serviceKey: symbol;
    abstract defaultController: ControllerType;
    abstract tryResolveController(method: string, requestUrl: string): IController | ControllerFunc | void;
}
export declare class ControllerResolverPluginManager extends IControllerResolverPluginManager implements IOnResolved {
    protected container: IServiceContainer;
    protected pluginDiscovery: IPluginDiscoveryService;
    protected aliasResolver: IAliasResolverService;
    private resolvers;
    defaultController: ControllerType;
    onResolved(): void;
    tryResolveController(method: string, requestUrl: string): IController | ControllerFunc | void;
}
export declare function ControllerResolver(priority: number): (pluginClass: Constructor<IControllerResolver>) => void;
export declare function isControllerClass(controller: any): controller is Constructor<IController>;
export declare function isControllerInstance(controller: any): controller is IController;
