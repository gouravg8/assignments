import { IOnResolved, IService, IServiceContainer } from "../../ServiceContainer";
import { IWebSocketController } from "../../WebSocketController";
import { Constructor } from "zox-plugins";
import { IWebSocketRoutePluginManager } from "../PluginManagers/WebSocketRoutePluginManager";
export declare type WebSocketControllerData = {
    handler: Constructor<IWebSocketController>;
    tokens: Array<string>;
};
export declare abstract class IWebSocketControllerManager implements IService {
    readonly serviceKey: symbol;
    abstract defaultController: Constructor<IWebSocketController>;
    abstract getController(requestUrl: string): IWebSocketController | null;
}
export declare class WebSocketControllerManager extends IWebSocketControllerManager implements IOnResolved {
    protected container: IServiceContainer;
    protected routePluginManager: IWebSocketRoutePluginManager;
    private controllers;
    defaultController: Constructor<IWebSocketController>;
    onResolved(): void;
    getController(requestUrl: string): IWebSocketController | null;
}
