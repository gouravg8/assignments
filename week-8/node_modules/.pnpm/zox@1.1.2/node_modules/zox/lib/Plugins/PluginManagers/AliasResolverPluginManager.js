"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceContainer_1 = require("../../ServiceContainer");
const ServicePluginManager_1 = require("../../PluginManagers/ServicePluginManager");
const zox_plugins_1 = require("zox-plugins");
const PluginDiscoveryService_1 = require("../../Services/PluginDiscoveryService");
const serviceKey = Symbol('Alias Resolver Manager');
const pluginKey = Symbol('Alias Resolver Manager');
class IAliasResolverService {
    get serviceKey() {
        return serviceKey;
    }
}
exports.IAliasResolverService = IAliasResolverService;
let AliasResolverPluginManager = class AliasResolverPluginManager extends IAliasResolverService {
    constructor() {
        super(...arguments);
        this.resolvers = [];
    }
    onResolved() {
        const pluginDefinitions = this.pluginDiscovery.getPlugins(pluginKey);
        for (const pluginDefinition of pluginDefinitions) {
            this.resolvers.push(this.container.create(pluginDefinition.pluginClass));
        }
    }
    tryResolveAlias(url, tokens) {
        for (const resolver of this.resolvers) {
            const res = resolver.tryResolveAlias(url, tokens);
            if (typeof res === 'string') {
                return res;
            }
        }
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], AliasResolverPluginManager.prototype, "container", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", PluginDiscoveryService_1.IPluginDiscoveryService)
], AliasResolverPluginManager.prototype, "pluginDiscovery", void 0);
AliasResolverPluginManager = __decorate([
    ServicePluginManager_1.Service
], AliasResolverPluginManager);
exports.AliasResolverPluginManager = AliasResolverPluginManager;
exports.AliasResolver = zox_plugins_1.PluginSetup(pluginKey);
//# sourceMappingURL=AliasResolverPluginManager.js.map