/// <reference types="node" />
import { IService } from "../../ServiceContainer";
import { IControllerResolverPluginManager } from "../PluginManagers/ControllerResolverPluginManager";
import { IResponse } from "../../Responses/IResponse";
import { ILayoutService } from "./LayoutService";
export declare type ResponseContent = {
    url?: string;
    response?: IResponse;
    isSupported?: boolean;
    isPage?: boolean;
    content?: string | Buffer;
    error?: string;
};
export declare abstract class IStaticExportService implements IService {
    readonly serviceKey: symbol;
    abstract getPages(url: string): Promise<Array<ResponseContent>>;
    abstract getContent(url: string): Promise<ResponseContent>;
    abstract savePages(directory: string, pages: Array<ResponseContent>): Promise<void>;
}
export declare class StaticExportService extends IStaticExportService {
    protected controllerResolverPluginManager: IControllerResolverPluginManager;
    protected layoutService: ILayoutService;
    getPages(url: string, items?: Array<ResponseContent>): Promise<Array<ResponseContent>>;
    getContent(url: string): Promise<ResponseContent>;
    protected getResponseContent(response: IResponse, url: string): ResponseContent;
    savePages(directory: string, pages: Array<ResponseContent>): Promise<void>;
}
export declare function getUrlsOnPage(page: string): Array<string>;
export declare function makeDirRecursive(directory: string): Promise<void>;
