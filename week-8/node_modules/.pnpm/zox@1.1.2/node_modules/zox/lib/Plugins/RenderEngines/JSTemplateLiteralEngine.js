"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const RenderEnginePluginManager_1 = require("../PluginManagers/RenderEnginePluginManager");
const ServiceContainer_1 = require("../../ServiceContainer");
const ConfigService_1 = require("../../Services/ConfigService");
let JSTemplateLiteralEngine = class JSTemplateLiteralEngine {
    onResolved() {
        const options = this.config.getConfig('js.html');
        this.tryCatch = !!options.try_catch;
    }
    compile(template, filename) {
        try {
            let func = `return this\`${template}\``;
            if (this.tryCatch) {
                func = `try{${func}}catch(e){console.error(String.raw\` Template: ${filename}\` + '\\n', e);return '';}`;
            }
            return new Function('_', func).bind(processTemplate);
        }
        catch (e) {
            console.error(` Template: ${filename}\n`, e);
            return () => '';
        }
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ConfigService_1.IConfigService)
], JSTemplateLiteralEngine.prototype, "config", void 0);
JSTemplateLiteralEngine = __decorate([
    RenderEnginePluginManager_1.RenderEngine('js.html')
], JSTemplateLiteralEngine);
exports.JSTemplateLiteralEngine = JSTemplateLiteralEngine;
const processTemplate = (strings, ...args) => {
    let res = '';
    for (let i = 0; i < strings.length; ++i) {
        if (i > 0) {
            const arg = args[i - 1];
            if (arg !== undefined && arg !== null) {
                res += arg;
            }
        }
        res += strings[i];
    }
    return res;
};
//# sourceMappingURL=JSTemplateLiteralEngine.js.map