/// <reference types="node" />
import { IService, IServiceContainer } from "../../ServiceContainer";
import { IPluginDiscoveryService } from "../../Services/PluginDiscoveryService";
import { IncomingMessage, ServerResponse } from "http";
import { Constructor } from "zox-plugins";
import { IController, MaybePromise } from "../../Controller";
export declare type ControllerPreparationFunc = (request: IncomingMessage, response: ServerResponse) => MaybePromise<boolean | void>;
export interface IControllerPreparationResolver {
    resolve(): MaybePromise<ControllerPreparationFunc>;
}
export declare abstract class IControllerPreparationPluginManager implements IService {
    readonly serviceKey: symbol;
    abstract hasMiddleware(controller: IController): boolean;
    abstract resolve(): Promise<void>;
    abstract execMiddleware(request: IncomingMessage, response: ServerResponse): Promise<boolean | void>;
}
export declare class ControllerExtensionsPluginManager extends IControllerPreparationPluginManager {
    protected container: IServiceContainer;
    protected pluginDiscovery: IPluginDiscoveryService;
    private extensions;
    hasMiddleware(controller: IController): boolean;
    resolve(): Promise<void>;
    execMiddleware(request: IncomingMessage, response: ServerResponse): Promise<boolean | void>;
}
export declare function isControllerMiddlewareClass(obj: any): obj is Constructor<IControllerPreparationResolver>;
export declare const ControllerMiddleware: (plugin: Constructor<IControllerPreparationResolver> | ControllerPreparationFunc) => void;
