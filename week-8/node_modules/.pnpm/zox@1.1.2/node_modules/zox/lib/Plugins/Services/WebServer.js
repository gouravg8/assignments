"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceContainer_1 = require("../../ServiceContainer");
const ServicePluginManager_1 = require("../../PluginManagers/ServicePluginManager");
const StringResponse_1 = require("../../Responses/StringResponse");
const ConfigService_1 = require("../../Services/ConfigService");
const ControllerResolverPluginManager_1 = require("../PluginManagers/ControllerResolverPluginManager");
const MiddlewarePluginManager_1 = require("../PluginManagers/MiddlewarePluginManager");
const serviceKey = Symbol('WebServer');
class IWebServer {
    get serviceKey() {
        return serviceKey;
    }
}
exports.IWebServer = IWebServer;
let WebServer = class WebServer extends IWebServer {
    onResolved() {
        const options = this.config.getConfig('server');
        this.trustedHosts = options.trustedHosts;
    }
    get handleRequestBound() {
        return this.handleRequest.bind(this);
    }
    async handleRequest(request, response) {
        if (this.trustedHosts && this.trustedHosts.indexOf(request.headers.host) < 0) {
            console.warn('Untrusted host:', request.headers.host);
            response.writeHead(500);
            response.end();
            return;
        }
        if (this.middlewarePluginManager.hasMiddleware &&
            await this.middlewarePluginManager.execMiddleware(request, response)) {
            return;
        }
        const controller = this.controllerResolverPluginManager.tryResolveController(request.method, request.url);
        if (controller) {
            let result;
            try {
                result = await (ControllerResolverPluginManager_1.isControllerInstance(controller) ?
                    controller.handle(request) :
                    controller(request));
                try {
                    result.send(response);
                }
                catch (e) {
                    console.error('Failed to send a response:', e);
                    response.writeHead(500);
                    response.end();
                }
            }
            catch (e) {
                console.error('Controller error:', e);
                response.writeHead(500);
                response.end();
                return;
            }
        }
        else {
            console.log('Route not found', request.url);
            new StringResponse_1.StringResponse('Not Found', 404).send(response);
        }
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ConfigService_1.IConfigService)
], WebServer.prototype, "config", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", MiddlewarePluginManager_1.IMiddlewarePluginManager)
], WebServer.prototype, "middlewarePluginManager", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ControllerResolverPluginManager_1.IControllerResolverPluginManager)
], WebServer.prototype, "controllerResolverPluginManager", void 0);
WebServer = __decorate([
    ServicePluginManager_1.Service
], WebServer);
exports.WebServer = WebServer;
//# sourceMappingURL=WebServer.js.map