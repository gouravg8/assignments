import { IOnResolved, IService, IServiceContainer } from "../../ServiceContainer";
import { IPluginDiscoveryService } from "../../Services/PluginDiscoveryService";
import { Constructor } from "zox-plugins";
export interface IPropertyDecorator {
    decorate(property: any): any;
}
export declare abstract class IPropertyDecoratorPluginManager implements IService {
    readonly serviceKey: symbol;
    abstract decorateProperties(obj: any): void;
}
export declare class PropertyDecoratorPluginManager extends IPropertyDecoratorPluginManager implements IOnResolved {
    protected container: IServiceContainer;
    protected pluginDiscovery: IPluginDiscoveryService;
    private decorators;
    onResolved(): void;
    decorateProperties(obj: any): void;
}
export declare function PropertyDecorator(decorator: string): (pluginClass: Constructor<IPropertyDecorator>) => void;
