import { IService, IServiceContainer } from "../../ServiceContainer";
import { Constructor, PluginDefinition } from "zox-plugins";
import { IRenderable } from "../../Renderable/Renderable";
import { IPluginDiscoveryService } from "../../Services/PluginDiscoveryService";
export declare type BlockOptions = {
    name: string;
};
export declare abstract class IBlockPluginManager implements IService {
    readonly serviceKey: symbol;
    abstract readonly blockList: Array<string>;
    abstract getBlock(name: string, content: IRenderable, blockData: any): IRenderable | null;
}
export declare class BlockPluginManager extends IBlockPluginManager {
    protected container: IServiceContainer;
    protected pluginDiscovery: IPluginDiscoveryService;
    protected readonly pluginDefinitions: Array<PluginDefinition<Constructor<IRenderable>, BlockOptions>>;
    readonly blockList: Array<string>;
    getBlock(name: string, content: IRenderable, blockData: any): IRenderable | null;
}
export declare function Block(options: BlockOptions): (pluginClass: Constructor<IRenderable>) => void;
