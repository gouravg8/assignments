"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceContainer_1 = require("../../ServiceContainer");
const ServicePluginManager_1 = require("../../PluginManagers/ServicePluginManager");
const Renderable_1 = require("../../Renderable/Renderable");
const RenderablePage_1 = require("../../Renderable/Layout/RenderablePage");
const RenderableHtml_1 = require("../../Renderable/Layout/RenderableHtml");
const ConfigService_1 = require("../../Services/ConfigService");
const RenderableRegion_1 = require("../../Renderable/Layout/RenderableRegion");
const BlockPluginManager_1 = require("../PluginManagers/BlockPluginManager");
const RenderableBlock_1 = require("../../Renderable/Layout/RenderableBlock");
const path = require("path");
const FileWatch_1 = require("../../Misc/FileWatch");
const PropertyDecoratorPluginManager_1 = require("../PluginManagers/PropertyDecoratorPluginManager");
const Utility_1 = require("../../Utility");
const serviceKey = Symbol('Layout');
class ILayoutService {
    get serviceKey() {
        return serviceKey;
    }
}
exports.ILayoutService = ILayoutService;
let LayoutService = class LayoutService extends ILayoutService {
    constructor() {
        super(...arguments);
        this.blocks = {};
    }
    onResolved() {
        this.globalConfig = this.config.getGlobalConfig();
        this.siteConfig = this.config.getConfig('site');
        this.blocksConfig = this.config.getConfig('blocks');
        this.blocksDataConfig = this.config.getConfig('blocks.data');
        this.libraryConfig = this.config.getConfig('library');
        if (this.siteConfig.favicon && this.siteConfig.favicon[0] != '/') {
            this.siteConfig.favicon = '/' + this.siteConfig.favicon;
        }
        if (!this.siteConfig.lang) {
            this.siteConfig.lang = 'en';
        }
        if (this.blocksDataConfig.directory) {
            const filePaths = Utility_1.listFilesSync(this.blocksDataConfig.directory);
            for (const filePath of filePaths) {
                const blockName = path.basename(filePath, path.extname(filePath));
                this.blocks[blockName] = ConfigService_1.loadYamlOrJsonFile(filePath);
                this.propertyDecoratorPluginManager.decorateProperties(this.blocks[blockName]);
            }
            FileWatch_1.watch(this.blocksDataConfig.directory, e => {
                const blockName = path.basename(e.info.filePath, path.extname(e.info.filePath));
                switch (e.event) {
                    case 'added':
                    case 'changed':
                        this.blocks[blockName] = ConfigService_1.loadYamlOrJsonFile(e.info.filePath);
                        this.propertyDecoratorPluginManager.decorateProperties(this.blocks[blockName]);
                        break;
                    case 'removed':
                        this.blocks[blockName] = undefined;
                        break;
                }
            }, 500);
        }
    }
    wrap(content) {
        if (content.type === 'html') {
            return content;
        }
        let page;
        if (content.type === 'page') {
            page = content;
        }
        else {
            const regions = {};
            for (const region in this.blocksConfig) {
                regions[region] = this.container.create(RenderableRegion_1.RenderableRegion, region);
                for (const blockName of this.blocksConfig[region]) {
                    const blockData = this.blocks[blockName];
                    let block = this.blockPluginManager.getBlock(blockName, content, blockData);
                    if (!block) {
                        block = this.container.create(RenderableBlock_1.RenderableBlock, blockName);
                        Object.assign(block, blockData);
                    }
                    regions[region].blocks.push(block);
                }
            }
            page = this.container.create(RenderablePage_1.RenderablePage, regions);
        }
        const html = this.container.create(RenderableHtml_1.RenderableHtml, page);
        html.title = content[Renderable_1.$metadata] && content[Renderable_1.$metadata].title ?
            content[Renderable_1.$metadata].title + ' | ' + this.siteConfig.siteName :
            content.title ?
                content.title + ' | ' + this.siteConfig.siteName :
                this.siteConfig.siteName;
        if (this.siteConfig.favicon) {
            html.head += `<link rel="icon" href="${this.siteConfig.favicon}">\n`;
        }
        html.html_attributes += `lang="${this.siteConfig.lang}"`;
        const loadedLibraries = [];
        if (this.libraryConfig.global) {
            loadedLibraries.push('global');
            loadLibrary(html, this.libraryConfig.global);
        }
        const hasLibraries = content[Renderable_1.$metadata] &&
            content[Renderable_1.$metadata].libraries &&
            content[Renderable_1.$metadata].libraries.length > 0;
        if (hasLibraries) {
            for (const library of content[Renderable_1.$metadata].libraries) {
                if (this.libraryConfig[library] && loadedLibraries.indexOf(library) == -1) {
                    loadedLibraries.push(library);
                    loadLibrary(html, this.libraryConfig[library]);
                }
            }
        }
        else if (!this.libraryConfig.global && this.libraryConfig.default) {
            loadLibrary(html, this.libraryConfig.default);
        }
        if (content[Renderable_1.$metadata] && content[Renderable_1.$metadata].head) {
            html.head += content[Renderable_1.$metadata].head + '\n';
        }
        if (content[Renderable_1.$metadata] && content[Renderable_1.$metadata].meta) {
            for (const meta of content[Renderable_1.$metadata].meta) {
                const attrList = Object.getOwnPropertyNames(meta);
                let attrs = '';
                for (const attr of attrList) {
                    attrs += ` ${attr}="${meta[attr]}"`;
                }
                html.head += `<meta${attrs}>\n`;
            }
        }
        return html;
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], LayoutService.prototype, "container", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ConfigService_1.IConfigService)
], LayoutService.prototype, "config", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", BlockPluginManager_1.IBlockPluginManager)
], LayoutService.prototype, "blockPluginManager", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", PropertyDecoratorPluginManager_1.IPropertyDecoratorPluginManager)
], LayoutService.prototype, "propertyDecoratorPluginManager", void 0);
LayoutService = __decorate([
    ServicePluginManager_1.Service
], LayoutService);
exports.LayoutService = LayoutService;
function loadLibrary(html, library) {
    if (library.styles) {
        for (const style of library.styles) {
            const href = style.href.includes('//') ? style.href : '/' + style.href;
            const attributes = buildAttributes(style.attrs);
            html.styles += `<link rel="stylesheet" href="${href}" ${attributes}>\n`;
        }
    }
    if (library.scripts) {
        for (const script of library.scripts) {
            const src = script.src.includes('//') ? script.src : '/' + script.src;
            const attributes = buildAttributes(script.attrs);
            const tag = `<script src="${src}" ${attributes}></script>\n`;
            if (script.head) {
                html.scripts_head += tag;
            }
            else {
                html.scripts_bottom += tag;
            }
            html.head += `<link rel="preload" href="${src}" as="script">\n`;
        }
    }
}
function buildAttributes(attributes) {
    if (!attributes) {
        return '';
    }
    let res = '';
    const attributeNames = Object.getOwnPropertyNames(attributes);
    for (const name of attributeNames) {
        if (attributes[name] != null) {
            res += ' ' + name + '=' + attributes[name];
        }
        else {
            res += ' ' + name;
        }
    }
    return res;
}
//# sourceMappingURL=LayoutService.js.map