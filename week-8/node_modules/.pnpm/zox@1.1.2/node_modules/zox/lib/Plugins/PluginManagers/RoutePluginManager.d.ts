/// <reference types="node" />
import { ControllerFunc, ControllerType, IControllerResolver } from "./ControllerResolverPluginManager";
import { IController } from "../../Controller";
import { UrlWithParsedQuery } from "url";
import { IPluginDiscoveryService } from "../../Services/PluginDiscoveryService";
import { IOnResolved, IServiceContainer } from "../../ServiceContainer";
export declare type MethodNames = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'OPTIONS' | 'ANY' | 'get' | 'post' | 'put' | 'patch' | 'delete' | 'head' | 'options' | 'any' | '*';
export declare type RouteOptions = {
    method?: MethodNames;
    route: string | RegExp;
};
export declare class RoutePluginManager implements IControllerResolver, IOnResolved {
    protected container: IServiceContainer;
    protected pluginDiscovery: IPluginDiscoveryService;
    private controllersByTokens;
    private controllersByRegExp;
    onResolved(): void;
    tryResolveController(method: string, parsedUrl: UrlWithParsedQuery, tokens: Array<string>): IController | ControllerFunc | void;
}
export declare function Route(options: RouteOptions): (pluginClass: ControllerType) => void;
export declare function Get(route: string | RegExp): (pluginClass: ControllerType) => void;
export declare function Post(route: string | RegExp): (pluginClass: ControllerType) => void;
export declare function Put(route: string | RegExp): (pluginClass: ControllerType) => void;
export declare function Patch(route: string | RegExp): (pluginClass: ControllerType) => void;
export declare function Delete(route: string | RegExp): (pluginClass: ControllerType) => void;
export declare function Head(route: string | RegExp): (pluginClass: ControllerType) => void;
export declare function Options(route: string | RegExp): (pluginClass: ControllerType) => void;
export declare function AnyMethod(route: string | RegExp): (pluginClass: ControllerType) => void;
