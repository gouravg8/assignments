"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceContainer_1 = require("../../ServiceContainer");
const ServicePluginManager_1 = require("../../PluginManagers/ServicePluginManager");
const RoutingUtility_1 = require("../../RoutingUtility");
const url = require("url");
const WebSocketRoutePluginManager_1 = require("../PluginManagers/WebSocketRoutePluginManager");
const serviceKey = Symbol('Web Socket Controller Manager');
class IWebSocketControllerManager {
    get serviceKey() {
        return serviceKey;
    }
}
exports.IWebSocketControllerManager = IWebSocketControllerManager;
let WebSocketControllerManager = class WebSocketControllerManager extends IWebSocketControllerManager {
    constructor() {
        super(...arguments);
        this.controllers = [];
    }
    onResolved() {
        this.controllers = this.routePluginManager.getControllersData();
    }
    getController(requestUrl) {
        const parsedUrl = url.parse(decodeURI(requestUrl), true);
        const tokens = RoutingUtility_1.routeTokens(parsedUrl.pathname);
        for (const controllerData of this.controllers) {
            const match = RoutingUtility_1.tryMatchRoute(tokens, controllerData.tokens);
            if (match !== false) {
                const controller = this.container.create(controllerData.handler);
                controller.query = parsedUrl.query;
                if (match !== true) {
                    controller.params = match;
                }
                return controller;
            }
        }
        if (this.defaultController) {
            const controller = this.container.create(this.defaultController);
            controller.query = parsedUrl.query;
            return controller;
        }
        return null;
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], WebSocketControllerManager.prototype, "container", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", WebSocketRoutePluginManager_1.IWebSocketRoutePluginManager)
], WebSocketControllerManager.prototype, "routePluginManager", void 0);
WebSocketControllerManager = __decorate([
    ServicePluginManager_1.Service
], WebSocketControllerManager);
exports.WebSocketControllerManager = WebSocketControllerManager;
//# sourceMappingURL=WebSocketControllerManager.js.map