"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServicePluginManager_1 = require("../../PluginManagers/ServicePluginManager");
const ServiceContainer_1 = require("../../ServiceContainer");
const ConfigService_1 = require("../../Services/ConfigService");
const serviceKey = Symbol('Date Formatter');
class IDateFormatter {
    get serviceKey() {
        return serviceKey;
    }
}
exports.IDateFormatter = IDateFormatter;
const token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g;
const timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;
const timezoneClip = /[^-+\dA-Z]/g;
let DateFormatter = class DateFormatter extends IDateFormatter {
    constructor() {
        super(...arguments);
        this.masks = {
            default: 'ddd mmm dd yyyy HH:MM:ss',
            standard: 'dddd, mmmm dS, yyyy, h:MM:ss TT',
            log: 'yyyy-mm-dd--HH-MM-ss',
            shortDate: 'm/d/yy',
            mediumDate: 'mmm d, yyyy',
            longDate: 'mmmm d, yyyy',
            fullDate: 'dddd, mmmm d, yyyy',
            shortTime: 'h:MM TT',
            mediumTime: 'h:MM:ss TT',
            longTime: 'h:MM:ss TT Z',
            isoDate: 'yyyy-mm-dd',
            isoTime: 'HH:MM:ss',
            isoDateTime: 'yyyy-mm-dd\'T\'HH:MM:ss',
            isoUtcDateTime: 'UTC:yyyy-mm-dd\'T\'HH:MM:ss\'Z\''
        };
        this.i18n = {
            dayNamesShort: [
                'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'
            ],
            dayNamesLong: [
                'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
            ],
            monthNamesShort: [
                'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
            ],
            monthNamesLong: [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ],
        };
    }
    onResolved() {
        const customMasks = this.config.getConfig('date.formats');
        Object.assign(this.masks, customMasks);
    }
    getI18n(lang) {
        if (!this.i18nMap) {
            this.i18nMap = {};
        }
        if (lang in this.i18nMap) {
            return this.i18nMap[lang] || this.i18n;
        }
        const res = this.config.getConfig('date/' + lang);
        if (!Array.isArray(res.dayNamesShort) ||
            !Array.isArray(res.dayNamesLong) ||
            !Array.isArray(res.monthNamesShort) ||
            !Array.isArray(res.monthNamesLong)) {
            console.warn('Invalid date i18n config: date/' + lang);
            this.i18nMap[lang] = undefined;
        }
        else {
            return this.i18nMap[lang] = res;
        }
    }
    formatDate(date, mask, i18n, utc) {
        date = date != null ? new Date(date) : new Date;
        if (isNaN(date)) {
            throw SyntaxError('invalid date');
        }
        mask = String(this.masks[mask] || mask || this.masks['default']);
        if (mask.slice(0, 4) == 'UTC:') {
            mask = mask.slice(4);
            utc = true;
        }
        i18n = i18n == null ? this.i18n :
            typeof i18n === 'object' ? i18n :
                this.getI18n(i18n);
        const _ = utc ? 'getUTC' : 'get', d = date[_ + 'Date'](), D = date[_ + 'Day'](), m = date[_ + 'Month'](), y = date[_ + 'FullYear'](), H = date[_ + 'Hours'](), M = date[_ + 'Minutes'](), s = date[_ + 'Seconds'](), L = date[_ + 'Milliseconds'](), o = utc ? 0 : date.getTimezoneOffset(), flags = {
            d: d,
            dd: pad(d),
            ddd: i18n.dayNamesShort[D],
            dddd: i18n.dayNamesLong[D],
            m: m + 1,
            mm: pad(m + 1),
            mmm: i18n.monthNamesShort[m],
            mmmm: i18n.monthNamesLong[m],
            yy: String(y).slice(2),
            yyyy: y,
            h: H % 12 || 12,
            hh: pad(H % 12 || 12),
            H: H,
            HH: pad(H),
            M: M,
            MM: pad(M),
            s: s,
            ss: pad(s),
            l: pad(L, 3),
            L: pad(L > 99 ? Math.round(L / 10) : L),
            t: H < 12 ? 'a' : 'p',
            tt: H < 12 ? 'am' : 'pm',
            T: H < 12 ? 'A' : 'P',
            TT: H < 12 ? 'AM' : 'PM',
            Z: utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),
            o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
            S: ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10 ? d % 10 : 0)]
        };
        return mask.replace(token, (a) => a in flags ? flags[a] : a.slice(1, a.length - 1));
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ConfigService_1.IConfigService)
], DateFormatter.prototype, "config", void 0);
DateFormatter = __decorate([
    ServicePluginManager_1.Service
], DateFormatter);
exports.DateFormatter = DateFormatter;
function pad(val, len) {
    val = String(val);
    len = len || 2;
    while (val.length < len) {
        val = '0' + val;
    }
    return val;
}
exports.pad = pad;
//# sourceMappingURL=DateFormatter.js.map