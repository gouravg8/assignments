"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceContainer_1 = require("../../ServiceContainer");
const ServicePluginManager_1 = require("../../PluginManagers/ServicePluginManager");
const zox_plugins_1 = require("zox-plugins");
const PluginDiscoveryService_1 = require("../../Services/PluginDiscoveryService");
const url = require("url");
const RoutingUtility_1 = require("../../RoutingUtility");
const AliasResolverPluginManager_1 = require("./AliasResolverPluginManager");
const serviceKey = Symbol('Controller Resolver');
const pluginKey = Symbol('Controller Resolver');
class IControllerResolverPluginManager {
    get serviceKey() {
        return serviceKey;
    }
}
exports.IControllerResolverPluginManager = IControllerResolverPluginManager;
let ControllerResolverPluginManager = class ControllerResolverPluginManager extends IControllerResolverPluginManager {
    constructor() {
        super(...arguments);
        this.resolvers = [];
    }
    onResolved() {
        const pluginDefinitions = this.pluginDiscovery.getPlugins(pluginKey);
        pluginDefinitions.sort((a, b) => a.data - b.data);
        for (const pluginDefinition of pluginDefinitions) {
            this.resolvers.push(this.container.create(pluginDefinition.pluginClass));
        }
    }
    tryResolveController(method, requestUrl) {
        const parsedUrl = url.parse(decodeURI(requestUrl), true);
        const tokens = RoutingUtility_1.routeTokens(parsedUrl.pathname);
        for (const resolver of this.resolvers) {
            const controller = resolver.tryResolveController(method, parsedUrl, tokens);
            if (controller !== undefined) {
                return controller;
            }
        }
        const alias = this.aliasResolver.tryResolveAlias(parsedUrl, tokens);
        if (typeof alias === 'string') {
            return this.tryResolveController(method, alias);
        }
        if (this.defaultController) {
            if (isControllerClass(this.defaultController)) {
                const controller = this.container.create(this.defaultController);
                controller.query = parsedUrl.query;
                return controller;
            }
            else if (this.defaultController.prototype) {
                return this.defaultController.bind({
                    container: this.container,
                    query: parsedUrl.query,
                });
            }
            else {
                return this.defaultController;
            }
        }
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], ControllerResolverPluginManager.prototype, "container", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", PluginDiscoveryService_1.IPluginDiscoveryService)
], ControllerResolverPluginManager.prototype, "pluginDiscovery", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", AliasResolverPluginManager_1.IAliasResolverService)
], ControllerResolverPluginManager.prototype, "aliasResolver", void 0);
ControllerResolverPluginManager = __decorate([
    ServicePluginManager_1.Service
], ControllerResolverPluginManager);
exports.ControllerResolverPluginManager = ControllerResolverPluginManager;
function ControllerResolver(priority) {
    return zox_plugins_1.PluginSetup(pluginKey, priority);
}
exports.ControllerResolver = ControllerResolver;
function isControllerClass(controller) {
    return controller.prototype && typeof controller.prototype.handle === 'function';
}
exports.isControllerClass = isControllerClass;
function isControllerInstance(controller) {
    return controller.__proto__ && typeof controller.__proto__.handle === 'function';
}
exports.isControllerInstance = isControllerInstance;
//# sourceMappingURL=ControllerResolverPluginManager.js.map