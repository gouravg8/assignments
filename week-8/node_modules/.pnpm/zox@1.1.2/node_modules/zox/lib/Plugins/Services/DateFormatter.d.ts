import { IOnResolved, IService } from "../../ServiceContainer";
import { IConfigService } from "../../Services/ConfigService";
export declare type DateMasks = {
    [key: string]: string;
};
export declare type DateI18n = {
    dayNamesShort: [string, string, string, string, string, string, string];
    dayNamesLong: [string, string, string, string, string, string, string];
    monthNamesShort: [string, string, string, string, string, string, string, string, string, string, string, string];
    monthNamesLong: [string, string, string, string, string, string, string, string, string, string, string, string];
};
export declare abstract class IDateFormatter implements IService {
    readonly serviceKey: symbol;
    abstract masks: DateMasks;
    abstract i18n: DateI18n;
    abstract i18nMap: {
        [lang: string]: DateI18n;
    };
    abstract formatDate(date?: Date | string | number, mask?: string, i18n?: DateI18n | string, utc?: boolean): string;
}
export declare class DateFormatter extends IDateFormatter implements IOnResolved {
    protected config: IConfigService;
    masks: DateMasks;
    i18n: DateI18n;
    i18nMap: {
        [lang: string]: DateI18n;
    };
    onResolved(): void;
    private getI18n;
    formatDate(date?: Date | string | number, mask?: string, i18n?: DateI18n | string, utc?: boolean): string;
}
export declare function pad(val: string | number, len?: number): string;
