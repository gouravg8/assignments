import { IService, IServiceContainer } from "../../ServiceContainer";
import { Constructor } from "zox-plugins";
import { IPluginDiscoveryService } from "../../Services/PluginDiscoveryService";
export declare type RenderEngineInfo = {
    renderEngine: IRenderEngine;
    extensions: Array<string>;
};
export interface IRenderEngine {
    compile(template: string, filename?: string): (data: any) => string;
}
export declare abstract class IRenderEnginePluginManager implements IService {
    readonly serviceKey: symbol;
    abstract readonly renderEngineInfoList: Array<RenderEngineInfo>;
}
export declare class RenderEnginePluginManager extends IRenderEnginePluginManager {
    protected container: IServiceContainer;
    protected pluginDiscovery: IPluginDiscoveryService;
    private _renderEngineInfoList;
    readonly renderEngineInfoList: Array<RenderEngineInfo>;
}
export declare function RenderEngine(...extensions: Array<string>): (pluginClass: Constructor<IRenderEngine>) => void;
