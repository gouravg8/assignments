"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceContainer_1 = require("./ServiceContainer");
const zox_plugins_1 = require("zox-plugins");
const PluginDiscoveryService_1 = require("./Services/PluginDiscoveryService");
const ConfigService_1 = require("./Services/ConfigService");
const AliasResolverPluginManager_1 = require("./Plugins/PluginManagers/AliasResolverPluginManager");
const RoutePluginManager_1 = require("./Plugins/PluginManagers/RoutePluginManager");
const http = require("http");
const ServicePluginManager_1 = require("./PluginManagers/ServicePluginManager");
const ControllerResolverPluginManager_1 = require("./Plugins/PluginManagers/ControllerResolverPluginManager");
const WebServer_1 = require("./Plugins/Services/WebServer");
class WebApp {
    constructor(options) {
        this.options = options || {};
        this.container = new ServiceContainer_1.ServiceContainer();
        this.pluginDiscovery = new zox_plugins_1.PluginDiscovery();
        this.container.registerAs(PluginDiscoveryService_1.IPluginDiscoveryService, this.pluginDiscovery);
    }
    registerService(service) {
        this.container.registerUnresolved(service);
    }
    use(pluginClass) {
        this.pluginDiscovery.scan(pluginClass);
    }
    listen(port) {
        this.container.registerUnresolved(new ConfigService_1.ConfigService(this.options.config));
        this.container.registerUnresolved(new NoAliasResolverService());
        this.pluginDiscovery.scan(RoutePluginManager_1.RoutePluginManager);
        this.pluginDiscovery.scan(ControllerResolverPluginManager_1.ControllerResolverPluginManager);
        this.pluginDiscovery.scan(WebServer_1.WebServer);
        this.container.create(ServicePluginManager_1.ServicePluginManager).registerServices();
        const server = http.createServer();
        server.on('request', this.container.get(WebServer_1.IWebServer).handleRequestBound);
        server.listen(port);
    }
    get(route, handler) {
        const controller = controllerWrapperFactory(handler);
        RoutePluginManager_1.Route({ method: 'GET', route })(controller);
        this.pluginDiscovery.scan(controller);
    }
    post(route, handler) {
        const controller = controllerWrapperFactory(handler);
        RoutePluginManager_1.Route({ method: 'POST', route })(controller);
        this.pluginDiscovery.scan(controller);
    }
    put(route, handler) {
        const controller = controllerWrapperFactory(handler);
        RoutePluginManager_1.Route({ method: 'PUT', route })(controller);
        this.pluginDiscovery.scan(controller);
    }
    delete(route, handler) {
        const controller = controllerWrapperFactory(handler);
        RoutePluginManager_1.Route({ method: 'DELETE', route })(controller);
        this.pluginDiscovery.scan(controller);
    }
}
exports.WebApp = WebApp;
class NoAliasResolverService extends AliasResolverPluginManager_1.IAliasResolverService {
    tryResolveAlias(url, tokens) { }
}
function webapp(options) {
    return new WebApp(options);
}
exports.webapp = webapp;
function controllerWrapperFactory(handler) {
    const controllerWrapper = class ControllerWrapper {
        handle(request) {
            throw new Error('Handler undefined');
        }
    };
    controllerWrapper.prototype.handle = handler;
    ServiceContainer_1.Dependency(ServiceContainer_1.ServiceContainer)(controllerWrapper.prototype, 'container');
    return controllerWrapper;
}
//# sourceMappingURL=WebApp.js.map