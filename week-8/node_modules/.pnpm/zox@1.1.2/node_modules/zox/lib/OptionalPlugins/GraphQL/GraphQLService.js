"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceContainer_1 = require("../../ServiceContainer");
const ServicePluginManager_1 = require("../../PluginManagers/ServicePluginManager");
const graphql_1 = require("graphql");
const assembleSchema_1 = require("graphql-plugins/lib/assembleSchema");
const PluginDiscoveryService_1 = require("../../Services/PluginDiscoveryService");
const SubscriptionManager_1 = require("graphql-plugins/lib/SubscriptionManager");
const fs = require("fs");
const path = require("path");
const Utility_1 = require("../../Utility");
const ConfigService_1 = require("../../Services/ConfigService");
const serviceKey = Symbol('GraphQL');
class IGraphQLService {
    get serviceKey() {
        return serviceKey;
    }
}
exports.IGraphQLService = IGraphQLService;
let GraphQLService = class GraphQLService extends IGraphQLService {
    constructor() {
        super(...arguments);
        this.queries = {};
        this.defaultOperations = {};
    }
    onResolved() {
        const schemaInfo = assembleSchema_1.assembleSchema(this.pluginDiscovery, {
            decorate: resolver => this.container.resolve(resolver, true)
        });
        this.schema = schemaInfo.schema;
        graphql_1.graphql(this.schema, graphql_1.introspectionQuery).then(data => {
            fs.writeFile('graphql.schema.json', JSON.stringify(data), err => {
                if (err) {
                    console.error(err);
                }
            });
        });
        const config = this.config.getConfig('graphql');
        if (config && config.directory) {
            const queryFiles = Utility_1.listFilesSync(config.directory);
            for (const queryFile of queryFiles) {
                const source = fs.readFileSync(queryFile, 'utf8');
                let document;
                try {
                    document = graphql_1.parse(source);
                }
                catch (err) {
                    console.error('Invalid query:', queryFile, '\n ', err);
                    continue;
                }
                const validationErrors = graphql_1.validate(this.schema, document);
                if (validationErrors.length > 0) {
                    console.warn('Bad query:', queryFile, '\n ', validationErrors);
                }
                else {
                    const id = path.basename(queryFile, '.graphql');
                    this.queries[id] = document;
                    this.defaultOperations[id] = defaultOperationName(document);
                }
            }
        }
    }
    hasQuery(queryId) {
        return this.queries.hasOwnProperty(queryId);
    }
    execute(queryId, rootValue, contextValue, variableValues, operationName, fieldResolver) {
        if (!this.queries.hasOwnProperty(queryId)) {
            throw new Error('Invalid query id: ' + queryId);
        }
        if (operationName === undefined) {
            operationName = this.defaultOperations[queryId];
        }
        return graphql_1.execute(this.schema, this.queries[queryId], rootValue, contextValue, variableValues, operationName, fieldResolver);
    }
    run(query, rootValue, contextValue, variableValues, operationName, fieldResolver) {
        return graphql_1.graphql(this.schema, query, rootValue, contextValue, variableValues, operationName, fieldResolver);
    }
    subscribe(args, feedHandler) {
        if (!this.subscriptionManager) {
            this.subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this.schema);
        }
        if (args.queryId) {
            if (!this.hasQuery(args.queryId)) {
                throw new Error('Invalid query id: ' + args.queryId);
            }
            args.document = this.queries[args.queryId];
            if (args.operationName === undefined) {
                args.operationName = this.defaultOperations[args.queryId];
            }
        }
        return this.subscriptionManager.subscribe(args, feedHandler);
    }
    unsubscribeAll() {
        this.subscriptionManager.unsubscribeAll();
    }
    getContext(request) {
        return this.contextGenerator ? this.contextGenerator(request) : undefined;
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], GraphQLService.prototype, "container", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", PluginDiscoveryService_1.IPluginDiscoveryService)
], GraphQLService.prototype, "pluginDiscovery", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ConfigService_1.IConfigService)
], GraphQLService.prototype, "config", void 0);
GraphQLService = __decorate([
    ServicePluginManager_1.Service
], GraphQLService);
exports.GraphQLService = GraphQLService;
function defaultOperationName(document) {
    const definitions = document.definitions;
    if (definitions.length == 1) {
        return undefined;
    }
    else {
        for (const definition of definitions) {
            if (definition.name && definition.name.value == 'default') {
                return 'default';
            }
        }
        return definitions[0].name.value;
    }
}
//# sourceMappingURL=GraphQLService.js.map