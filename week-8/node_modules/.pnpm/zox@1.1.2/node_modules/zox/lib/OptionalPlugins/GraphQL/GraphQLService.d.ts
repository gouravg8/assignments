/// <reference types="node" />
import { IOnResolved, IService, IServiceContainer } from "../../ServiceContainer";
import { DocumentNode } from "graphql/language/ast";
import { ExecutionResult } from "graphql/execution/execute";
import { MaybePromise } from "graphql/jsutils/MaybePromise";
import { GraphQLFieldResolver } from "graphql/type/definition";
import Maybe from "graphql/tsutils/Maybe";
import { IPluginDiscoveryService } from "../../Services/PluginDiscoveryService";
import { CancellationToken } from "graphql-plugins/lib/SubscriptionManager";
import { IConfigService } from "../../Services/ConfigService";
import { IncomingMessage } from "http";
export declare type SubscribeArgsId = {
    queryId?: string;
    document?: DocumentNode;
    rootValue?: any;
    contextValue?: any;
    variableValues?: Maybe<{
        [key: string]: any;
    }>;
    operationName?: Maybe<string>;
    fieldResolver?: Maybe<GraphQLFieldResolver<any, any>>;
    subscribeFieldResolver?: Maybe<GraphQLFieldResolver<any, any>>;
};
export declare abstract class IGraphQLService implements IService {
    readonly serviceKey: symbol;
    abstract hasQuery(queryId: string): boolean;
    abstract execute(queryId: string, rootValue?: any, contextValue?: any, variableValues?: Maybe<{
        [key: string]: any;
    }>, operationName?: Maybe<string>, fieldResolver?: Maybe<GraphQLFieldResolver<any, any>>): MaybePromise<ExecutionResult>;
    abstract run(query: string, rootValue?: any, contextValue?: any, variableValues?: Maybe<{
        [key: string]: any;
    }>, operationName?: Maybe<string>, fieldResolver?: Maybe<GraphQLFieldResolver<any, any>>): Promise<ExecutionResult>;
    abstract subscribe(args: SubscribeArgsId, feedHandler: (any: any) => void): Promise<CancellationToken>;
    abstract unsubscribeAll(): void;
    contextGenerator?: (request: IncomingMessage) => any;
    abstract getContext(request: IncomingMessage): any;
}
export declare class GraphQLService extends IGraphQLService implements IOnResolved {
    protected container: IServiceContainer;
    protected pluginDiscovery: IPluginDiscoveryService;
    protected config: IConfigService;
    private schema;
    private subscriptionManager;
    private queries;
    private defaultOperations;
    onResolved(): void;
    hasQuery(queryId: string): boolean;
    execute(queryId: string, rootValue?: any, contextValue?: any, variableValues?: Maybe<{
        [key: string]: any;
    }>, operationName?: Maybe<string>, fieldResolver?: Maybe<GraphQLFieldResolver<any, any>>): MaybePromise<ExecutionResult>;
    run(query: string, rootValue?: any, contextValue?: any, variableValues?: Maybe<{
        [key: string]: any;
    }>, operationName?: Maybe<string>, fieldResolver?: Maybe<GraphQLFieldResolver<any, any>>): Promise<ExecutionResult>;
    subscribe(args: SubscribeArgsId, feedHandler: (any: any) => void): Promise<CancellationToken>;
    unsubscribeAll(): void;
    getContext(request: IncomingMessage): any;
}
