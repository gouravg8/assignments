"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const Controller_1 = require("../../../Controller");
const RoutePluginManager_1 = require("../../../Plugins/PluginManagers/RoutePluginManager");
const GraphQLService_1 = require("../GraphQLService");
const JsonResponse_1 = require("../../../Responses/JsonResponse");
const ServiceContainer_1 = require("../../../ServiceContainer");
let GraphQLGet = class GraphQLGet {
    handle(request) {
        if ('query' in this.query) {
            let variables;
            if ('variables' in this.query) {
                variables = JSON.parse(this.query['variables']);
            }
            return this.graphQLService.run(this.query['query'], undefined, this.graphQLService.getContext(request), variables)
                .then(result => new JsonResponse_1.JsonResponse(result));
        }
        return new JsonResponse_1.JsonResponse({ status: 'Error', error: 'Missing query parameter' });
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", GraphQLService_1.IGraphQLService)
], GraphQLGet.prototype, "graphQLService", void 0);
GraphQLGet = __decorate([
    RoutePluginManager_1.Route({
        route: '/graphql'
    })
], GraphQLGet);
exports.GraphQLGet = GraphQLGet;
let GraphQLPost = class GraphQLPost extends Controller_1.JsonController {
    handleJson(request, query) {
        return this.graphQLService.run(query.query, undefined, this.graphQLService.getContext(request), query.variables, query.operation)
            .then(result => new JsonResponse_1.JsonResponse(result));
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", GraphQLService_1.IGraphQLService)
], GraphQLPost.prototype, "graphQLService", void 0);
GraphQLPost = __decorate([
    RoutePluginManager_1.Route({
        method: 'post',
        route: '/graphql'
    })
], GraphQLPost);
exports.GraphQLPost = GraphQLPost;
let GraphQLGetPredefined = class GraphQLGetPredefined {
    handle(request) {
        if (this.graphQLService.hasQuery(this.params.id)) {
            let variables;
            if ('variables' in this.query) {
                variables = JSON.parse(this.query['variables']);
            }
            const res = this.graphQLService.execute(this.params.id, undefined, this.graphQLService.getContext(request), variables, this.params.op);
            return Promise.resolve(res).then(result => new JsonResponse_1.JsonResponse(result));
        }
        return new JsonResponse_1.JsonResponse({ errors: [{ message: 'Query does not exist: ' + this.params.id }] });
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", GraphQLService_1.IGraphQLService)
], GraphQLGetPredefined.prototype, "graphQLService", void 0);
GraphQLGetPredefined = __decorate([
    RoutePluginManager_1.Route({
        route: '/gql/:id'
    }),
    RoutePluginManager_1.Route({
        route: '/gql/:id/:op'
    })
], GraphQLGetPredefined);
exports.GraphQLGetPredefined = GraphQLGetPredefined;
let GraphQLPostPredefined = class GraphQLPostPredefined extends Controller_1.JsonController {
    handleJson(request, variables) {
        if (this.graphQLService.hasQuery(this.params.id)) {
            const res = this.graphQLService.execute(this.params.id, undefined, this.graphQLService.getContext(request), variables, this.params.op);
            return Promise.resolve(res).then(result => new JsonResponse_1.JsonResponse(result));
        }
        return new JsonResponse_1.JsonResponse({ errors: [{ message: 'Query does not exist: ' + this.params.id }] });
    }
    handleInvalidRequest(request, reason) {
        return new JsonResponse_1.JsonResponse({ errors: [{ message: reason }] }, 400);
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", GraphQLService_1.IGraphQLService)
], GraphQLPostPredefined.prototype, "graphQLService", void 0);
GraphQLPostPredefined = __decorate([
    RoutePluginManager_1.Route({
        method: 'post',
        route: '/gql/:id'
    }),
    RoutePluginManager_1.Route({
        method: 'post',
        route: '/gql/:id/:op'
    })
], GraphQLPostPredefined);
exports.GraphQLPostPredefined = GraphQLPostPredefined;
//# sourceMappingURL=GraphQLQuery.js.map