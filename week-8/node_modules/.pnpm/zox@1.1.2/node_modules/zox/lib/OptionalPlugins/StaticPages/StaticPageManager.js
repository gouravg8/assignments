"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const zox_plugins_1 = require("zox-plugins");
const path = require("path");
const fs = require("fs");
const ServicePluginManager_1 = require("../../PluginManagers/ServicePluginManager");
const ServiceContainer_1 = require("../../ServiceContainer");
const PluginDiscoveryService_1 = require("../../Services/PluginDiscoveryService");
const ConfigService_1 = require("../../Services/ConfigService");
const PropertyDecoratorPluginManager_1 = require("../../Plugins/PluginManagers/PropertyDecoratorPluginManager");
const Utility_1 = require("../../Utility");
const RoutingUtility_1 = require("../../RoutingUtility");
const FileWatch_1 = require("../../Misc/FileWatch");
const ControllerResolverPluginManager_1 = require("../../Plugins/PluginManagers/ControllerResolverPluginManager");
const RenderableStaticPage_1 = require("../../Renderable/Content/RenderableStaticPage");
const RenderResponse_1 = require("../../Responses/RenderResponse");
const pageParserManagerServiceKey = Symbol('Static Page Parser Manager');
const pageTypeServiceKey = Symbol('Static Page Type');
const pageTypePluginKey = Symbol('Static Page Type');
const pageParserPluginKey = Symbol('Static Page Parser');
exports.pageNameKey = Symbol('Page Name');
class IStaticPageParserPluginManager {
    get serviceKey() {
        return pageParserManagerServiceKey;
    }
}
exports.IStaticPageParserPluginManager = IStaticPageParserPluginManager;
let StaticPageParserPluginManager = class StaticPageParserPluginManager extends IStaticPageParserPluginManager {
    get pages() {
        return this._pages || (this._pages = this.loadPages());
    }
    get pageParserInfoList() {
        if (!this._pageParserInfoList) {
            this._pageParserInfoList = [];
            const pluginDefinitions = this.pluginDiscovery.getPlugins(pageParserPluginKey);
            for (const pluginDefinition of pluginDefinitions) {
                this._pageParserInfoList.push({
                    parser: this.container.create(pluginDefinition.pluginClass),
                    extensions: pluginDefinition.data,
                });
            }
        }
        return this._pageParserInfoList;
    }
    loadPages() {
        const pages = [];
        const filePaths = Utility_1.listFilesSync(this.options.pages);
        for (const filePath of filePaths) {
            const ext = path.extname(filePath).substring(1);
            let parsed = false;
            for (const pageParserInfo of this.pageParserInfoList) {
                if (pageParserInfo.extensions.indexOf(ext) >= 0) {
                    const file = fs.readFileSync(filePath, 'utf8');
                    const pageData = pageParserInfo.parser.parsePage(file, this.options.pages, filePath);
                    if (pageData) {
                        this.propertyDecoratorPluginManager.decorateProperties(pageData);
                        if (pageData.title === undefined) {
                            pageData.title = path.basename(filePath, '.' + ext);
                        }
                        else {
                            pageData.title = String(pageData.title);
                        }
                        if (pageData[exports.pageNameKey] === undefined) {
                            pageData[exports.pageNameKey] = urlAlias(pageData.title);
                        }
                        if (pageData.date) {
                            pageData.date = new Date(pageData.date);
                        }
                        if (pageData.url === undefined) {
                            const dirPath = path.dirname(path.relative(this.options.pages, filePath));
                            if (dirPath !== '.') {
                                pageData.url = dirPath + '/' + urlAlias(pageData.title);
                            }
                            else {
                                pageData.url = urlAlias(pageData.title);
                            }
                        }
                        else {
                            pageData.url = String(pageData.url);
                        }
                        const qIndex = pageData.url.indexOf('?');
                        if (qIndex >= 0) {
                            pageData.url.substring(0, qIndex);
                            console.warn("Url contains an invalid character '?' on page: " + filePath);
                        }
                        pageData.urlTokens = RoutingUtility_1.routeTokens(pageData.url);
                        this.applyIncludes(pageData);
                        pages.push(pageData);
                    }
                    parsed = true;
                    break;
                }
            }
            if (!parsed) {
                console.warn('Page type is not supported: ' + filePath);
            }
        }
        return pages;
    }
    applyIncludes(pageData) {
        if (pageData.include) {
            const includes = pageData.include;
            if (Array.isArray(includes)) {
                for (const partialPath of includes) {
                    const filePath = path.join(this.options.partials, partialPath);
                    const data = this.getPartial(filePath);
                    if (data !== undefined) {
                        if (typeof data === 'object' && !Array.isArray(data)) {
                            this.applyIncludes(data);
                            Object.assign(pageData, data);
                        }
                    }
                }
            }
            else if (typeof includes === 'object') {
                const keys = Object.getOwnPropertyNames(includes);
                for (const key of keys) {
                    const filePath = path.join(this.options.partials, includes[key]);
                    const data = this.getPartial(filePath);
                    if (data !== undefined) {
                        if (typeof data === 'object' && !Array.isArray(data)) {
                            this.applyIncludes(data);
                        }
                        pageData[key] = data;
                    }
                }
            }
        }
    }
    getPartial(filePath) {
        if (!this._partials) {
            this._partials = {};
        }
        if (!(filePath in this._partials)) {
            const data = ConfigService_1.loadYamlOrJsonFile(filePath);
            this.propertyDecoratorPluginManager.decorateProperties(data);
            this._partials[filePath] = data;
            return data;
        }
        return this._partials[filePath];
    }
    onResolved() {
        this.options = this.config.getConfig('static.page');
        this.options.pages = this.options.pages || 'pages/root';
        this.options.partials = this.options.partials || path.join(this.options.pages, '../partials');
        if (this.config.getGlobalConfig().watch) {
            const handleEvent = (e) => {
                if (e.event != 'initial') {
                    this._partials = this._pages = null;
                }
            };
            FileWatch_1.watch(this.options.pages, handleEvent, 500);
            FileWatch_1.watch(this.options.partials, handleEvent, 500);
        }
        this._pages = this.loadPages();
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], StaticPageParserPluginManager.prototype, "container", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", PluginDiscoveryService_1.IPluginDiscoveryService)
], StaticPageParserPluginManager.prototype, "pluginDiscovery", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ConfigService_1.IConfigService)
], StaticPageParserPluginManager.prototype, "config", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", PropertyDecoratorPluginManager_1.IPropertyDecoratorPluginManager)
], StaticPageParserPluginManager.prototype, "propertyDecoratorPluginManager", void 0);
StaticPageParserPluginManager = __decorate([
    ServicePluginManager_1.Service
], StaticPageParserPluginManager);
exports.StaticPageParserPluginManager = StaticPageParserPluginManager;
let StaticPageControllerResolver = class StaticPageControllerResolver {
    tryResolveController(method, parsedUrl, tokens) {
        if (method == 'GET') {
            for (const page of this.manager.pages) {
                if (RoutingUtility_1.tryMatchExactRoute(tokens, page.urlTokens)) {
                    const controller = this.container.create(StaticPageController);
                    controller.pageData = page;
                    return controller;
                }
            }
        }
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], StaticPageControllerResolver.prototype, "container", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", IStaticPageParserPluginManager)
], StaticPageControllerResolver.prototype, "manager", void 0);
StaticPageControllerResolver = __decorate([
    ControllerResolverPluginManager_1.ControllerResolver(10)
], StaticPageControllerResolver);
exports.StaticPageControllerResolver = StaticPageControllerResolver;
function StaticPageParser(...extensions) {
    return zox_plugins_1.PluginSetup(pageParserPluginKey, extensions);
}
exports.StaticPageParser = StaticPageParser;
class IStaticPageTypePluginManager {
    get serviceKey() {
        return pageTypeServiceKey;
    }
}
exports.IStaticPageTypePluginManager = IStaticPageTypePluginManager;
let StaticPageTypePluginManager = class StaticPageTypePluginManager extends IStaticPageTypePluginManager {
    getRenderablePageType(type) {
        if (typeof type === 'string') {
            const pluginDefinitions = this.pluginDiscovery.getPlugins(pageTypePluginKey);
            for (const pluginDefinition of pluginDefinitions) {
                if (pluginDefinition.data == type) {
                    return pluginDefinition.pluginClass;
                }
            }
        }
        return RenderableStaticPage_1.RenderableStaticPage;
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", PluginDiscoveryService_1.IPluginDiscoveryService)
], StaticPageTypePluginManager.prototype, "pluginDiscovery", void 0);
StaticPageTypePluginManager = __decorate([
    ServicePluginManager_1.Service
], StaticPageTypePluginManager);
exports.StaticPageTypePluginManager = StaticPageTypePluginManager;
function StaticPageType(...extensions) {
    return zox_plugins_1.PluginSetup(pageTypePluginKey, extensions);
}
exports.StaticPageType = StaticPageType;
class StaticPageController {
    handle(request) {
        const pageType = this.staticPageTypePluginManager.getRenderablePageType(this.pageData.type);
        const page = this.container.create(pageType, this.pageData);
        return this.container.create(RenderResponse_1.RenderResponse, page);
    }
}
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], StaticPageController.prototype, "container", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", IStaticPageTypePluginManager)
], StaticPageController.prototype, "staticPageTypePluginManager", void 0);
exports.StaticPageController = StaticPageController;
function urlAlias(str) {
    return str
        .toLowerCase()
        .replace(/[^\w ]+/g, '')
        .replace(/ +/g, '-');
}
exports.urlAlias = urlAlias;
//# sourceMappingURL=StaticPageManager.js.map