"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const RoutePluginManager_1 = require("../../../Plugins/PluginManagers/RoutePluginManager");
const GraphQLService_1 = require("../GraphQLService");
const JsonResponse_1 = require("../../../Responses/JsonResponse");
const ServiceContainer_1 = require("../../../ServiceContainer");
const EventStreamResponse_1 = require("../../../Responses/EventStreamResponse");
const graphql_1 = require("graphql");
function subscriptionEventStream(args) {
    let eventStream;
    return this.graphQLService.subscribe(args, e => {
        eventStream.sendMessage(e);
    })
        .then(ct => {
        eventStream = new EventStreamResponse_1.EventStreamResponse();
        eventStream.onClose = ct;
        return eventStream;
    }, err => {
        return new JsonResponse_1.JsonResponse({ status: 'Error', error: err.message });
    });
}
let GraphQLEventStream = class GraphQLEventStream {
    handle(request) {
        console.log('GraphQL start subscription');
        if ('query' in this.query) {
            const document = graphql_1.parse(this.query['query']);
            let variables;
            if ('variables' in this.query) {
                variables = JSON.parse(this.query['variables']);
            }
            return subscriptionEventStream({
                document,
                variableValues: variables,
                contextValue: this.graphQLService.getContext(request),
            });
        }
        return new JsonResponse_1.JsonResponse({ status: 'Error', error: 'Missing query parameter' });
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", GraphQLService_1.IGraphQLService)
], GraphQLEventStream.prototype, "graphQLService", void 0);
GraphQLEventStream = __decorate([
    RoutePluginManager_1.Route({
        route: '/graphql/subscribe'
    })
], GraphQLEventStream);
exports.GraphQLEventStream = GraphQLEventStream;
let GraphQLPredefinedEventStream = class GraphQLPredefinedEventStream {
    handle(request) {
        if (this.graphQLService.hasQuery(this.params.id)) {
            return subscriptionEventStream({
                queryId: this.params.id,
                variableValues: this.query,
                contextValue: this.graphQLService.getContext(request),
                operationName: this.params.op,
            });
        }
        return new JsonResponse_1.JsonResponse({ status: 'Error', error: 'Query does not exist: ' + this.params.id });
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", GraphQLService_1.IGraphQLService)
], GraphQLPredefinedEventStream.prototype, "graphQLService", void 0);
GraphQLPredefinedEventStream = __decorate([
    RoutePluginManager_1.Route({
        route: '/gql/sub/:id'
    }),
    RoutePluginManager_1.Route({
        route: '/gql/sub/:id/:op'
    })
], GraphQLPredefinedEventStream);
exports.GraphQLPredefinedEventStream = GraphQLPredefinedEventStream;
//# sourceMappingURL=GraphQLSubscription.js.map