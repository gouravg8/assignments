/// <reference types="node" />
import { IController, JsonController, MaybePromise } from "../../../Controller";
import { IncomingMessage } from "http";
import { IGraphQLService } from "../GraphQLService";
import { IResponse } from "../../../Responses/IResponse";
import { ParsedUrlQuery } from "querystring";
import { RouteParams } from "../../../RoutingUtility";
export declare class GraphQLGet implements IController {
    protected graphQLService: IGraphQLService;
    query: ParsedUrlQuery;
    handle(request: IncomingMessage): IResponse | Promise<IResponse>;
}
export declare class GraphQLPost extends JsonController {
    protected graphQLService: IGraphQLService;
    handleJson(request: IncomingMessage, query: any): IResponse | Promise<IResponse>;
}
export declare class GraphQLGetPredefined implements IController {
    protected graphQLService: IGraphQLService;
    params: RouteParams;
    query: ParsedUrlQuery;
    handle(request: IncomingMessage): IResponse | Promise<IResponse>;
}
export declare class GraphQLPostPredefined extends JsonController {
    protected graphQLService: IGraphQLService;
    params: RouteParams;
    handleJson(request: IncomingMessage, variables: any): MaybePromise<IResponse>;
    handleInvalidRequest(request: IncomingMessage, reason: string): MaybePromise<IResponse>;
}
