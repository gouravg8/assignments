/// <reference types="node" />
import { UrlWithParsedQuery } from "url";
import { Constructor } from "zox-plugins";
import { IncomingMessage } from "http";
import { IOnResolved, IService, IServiceContainer } from "../../ServiceContainer";
import { IPluginDiscoveryService } from "../../Services/PluginDiscoveryService";
import { IConfigService } from "../../Services/ConfigService";
import { IPropertyDecoratorPluginManager } from "../../Plugins/PluginManagers/PropertyDecoratorPluginManager";
import { IControllerResolver } from "../../Plugins/PluginManagers/ControllerResolverPluginManager";
import { IController } from "../../Controller";
import { IRenderable } from "../../Renderable/Renderable";
import { IResponse } from "../../Responses/IResponse";
export declare const pageNameKey: unique symbol;
export declare type StaticPageParserInfo = {
    parser: IStaticPageParser;
    extensions: Array<string>;
};
export declare type StaticPageData = {
    [pageNameKey]?: string;
    type?: string;
    title?: string;
    urlTokens?: Array<string>;
    url?: string;
    date?: Date;
    include?: Array<string> | {
        [key: string]: string;
    };
};
export interface IStaticPageParser {
    parsePage(page: string, directory: string, filePath: string): StaticPageData | void;
}
export declare abstract class IStaticPageParserPluginManager implements IService {
    readonly serviceKey: symbol;
    abstract readonly pages: Array<StaticPageData>;
}
export declare class StaticPageParserPluginManager extends IStaticPageParserPluginManager implements IOnResolved {
    protected container: IServiceContainer;
    protected pluginDiscovery: IPluginDiscoveryService;
    protected config: IConfigService;
    protected propertyDecoratorPluginManager: IPropertyDecoratorPluginManager;
    private options;
    private _pages;
    private _partials;
    readonly pages: Array<StaticPageData>;
    private _pageParserInfoList;
    private readonly pageParserInfoList;
    private loadPages;
    private applyIncludes;
    private getPartial;
    onResolved(): void;
}
export declare class StaticPageControllerResolver implements IControllerResolver {
    protected container: IServiceContainer;
    protected manager: IStaticPageParserPluginManager;
    tryResolveController(method: string, parsedUrl: UrlWithParsedQuery, tokens: Array<string>): IController | void;
}
export declare function StaticPageParser(...extensions: Array<string>): (pluginClass: Constructor<IStaticPageParser>) => void;
export declare abstract class IStaticPageTypePluginManager implements IService {
    readonly serviceKey: symbol;
    abstract getRenderablePageType(type: string): Constructor<IRenderable>;
}
export declare class StaticPageTypePluginManager extends IStaticPageTypePluginManager {
    protected pluginDiscovery: IPluginDiscoveryService;
    getRenderablePageType(type: string | undefined): Constructor<IRenderable>;
}
export declare function StaticPageType(...extensions: Array<string>): (pluginClass: Constructor<IRenderable>) => void;
export declare class StaticPageController implements IController {
    protected container: IServiceContainer;
    protected staticPageTypePluginManager: IStaticPageTypePluginManager;
    pageData: any;
    handle(request: IncomingMessage): IResponse | Promise<IResponse>;
}
export declare function urlAlias(str: string): string;
