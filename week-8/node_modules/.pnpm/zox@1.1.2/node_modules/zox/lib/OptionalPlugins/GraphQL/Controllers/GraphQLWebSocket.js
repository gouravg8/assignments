"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceContainer_1 = require("../../../ServiceContainer");
const WebSocketController_1 = require("../../../WebSocketController");
const WebSocketRoutePluginManager_1 = require("../../../Plugins/PluginManagers/WebSocketRoutePluginManager");
const GraphQLService_1 = require("../GraphQLService");
const WebSocket = require("ws");
const graphql_1 = require("graphql");
let GraphQLWebSocket = class GraphQLWebSocket extends WebSocketController_1.WebSocketController {
    constructor() {
        super(...arguments);
        this.subs = [];
    }
    init() {
        console.log('GraphQL start web socket');
    }
    onMessage(data) {
        if (typeof data !== 'string') {
            data = data.toString();
        }
        const req = JSON.parse(data);
        switch (req.type) {
            case 'sub':
                let cancellationToken;
                this.graphQLService.subscribe({
                    document: graphql_1.parse(req.query),
                    variableValues: req.variables,
                    contextValue: this.graphQLService.getContext(this.request),
                }, e => {
                    if (this.ws.readyState === WebSocket.OPEN) {
                        e.id = req.id;
                        this.send(e);
                    }
                    else if (this.ws.readyState !== WebSocket.CONNECTING) {
                        cancellationToken();
                    }
                }).then(ct => {
                    cancellationToken = ct;
                    this.subs.push({ id: req.id, ct: ct });
                }, console.warn);
                break;
            case 'subId':
                if (this.graphQLService.hasQuery(req.query)) {
                    let cancellationToken;
                    this.graphQLService.subscribe({
                        queryId: req.query,
                        operationName: req.operation,
                        variableValues: req.variables,
                        contextValue: this.graphQLService.getContext(this.request),
                    }, e => {
                        if (this.ws.readyState === WebSocket.OPEN) {
                            e.id = req.id;
                            this.send(e);
                        }
                        else if (this.ws.readyState !== WebSocket.CONNECTING) {
                            cancellationToken();
                        }
                    }).then(ct => {
                        cancellationToken = ct;
                        this.subs.push({ id: req.id, ct: ct });
                    }, console.warn);
                }
                else {
                    this.send({ error: 'Query does not exist: ' + req.query, id: req.id });
                }
                break;
            case 'subCancel':
                let found = false;
                for (let i = 0; i < this.subs.length; ++i) {
                    if (this.subs[i].id === req.id) {
                        this.subs[i].ct();
                        this.subs.splice(i, 1);
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    this.send({ done: true, id: req.id, msg: 'Subscription not found' });
                }
                break;
            case 'query':
                this.graphQLService.run(req.query, undefined, this.graphQLService.getContext(this.request), req.variables)
                    .then(result => {
                    if (this.ws.readyState === WebSocket.OPEN) {
                        this.send({ id: req.id, value: result });
                    }
                }, console.warn);
                break;
            case 'queryId':
                if (this.graphQLService.hasQuery(req.query)) {
                    const res = this.graphQLService.execute(req.query, undefined, this.graphQLService.getContext(this.request), req.variables, req.operation);
                    Promise.resolve(res).then(result => {
                        if (this.ws.readyState === WebSocket.OPEN) {
                            this.send({ id: req.id, value: result });
                        }
                    }, console.warn);
                }
                else {
                    this.send({ error: 'Query does not exist: ' + req.query, id: req.id });
                }
                break;
            default:
                this.send({ error: 'Invalid message', id: req.id });
                console.warn('Invalid message:', req);
                break;
        }
    }
};
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", GraphQLService_1.IGraphQLService)
], GraphQLWebSocket.prototype, "graphQLService", void 0);
GraphQLWebSocket = __decorate([
    WebSocketRoutePluginManager_1.WebSocketRoute('/graphql')
], GraphQLWebSocket);
exports.GraphQLWebSocket = GraphQLWebSocket;
//# sourceMappingURL=GraphQLWebSocket.js.map