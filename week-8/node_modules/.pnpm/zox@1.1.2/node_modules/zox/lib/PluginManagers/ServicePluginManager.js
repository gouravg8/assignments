"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ServiceContainer_1 = require("../ServiceContainer");
const zox_plugins_1 = require("zox-plugins");
const PluginDiscoveryService_1 = require("../Services/PluginDiscoveryService");
const serviceKey = Symbol('Service Plugin Manager');
const pluginKey = Symbol('Service');
class IServicePluginManager {
    get serviceKey() {
        return serviceKey;
    }
}
exports.IServicePluginManager = IServicePluginManager;
class ServicePluginManager extends IServicePluginManager {
    registerServices(forceResolve) {
        const pluginDefinitions = this.pluginDiscovery.getPlugins(pluginKey);
        for (const pluginDefinition of pluginDefinitions) {
            this.container.registerUnresolved(new pluginDefinition.pluginClass());
        }
        if (forceResolve == true) {
            this.forceResolveServices();
        }
    }
    forceResolveServices() {
        const pluginDefinitions = this.pluginDiscovery.getPlugins(pluginKey);
        for (const pluginDefinition of pluginDefinitions) {
            this.container.get(pluginDefinition.pluginClass.prototype.serviceKey);
        }
    }
}
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], ServicePluginManager.prototype, "container", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", PluginDiscoveryService_1.IPluginDiscoveryService)
], ServicePluginManager.prototype, "pluginDiscovery", void 0);
exports.ServicePluginManager = ServicePluginManager;
exports.Service = zox_plugins_1.PluginSetup(pluginKey);
//# sourceMappingURL=ServicePluginManager.js.map