import "reflect-metadata";
export interface IService {
    readonly serviceKey: symbol;
}
export declare type AbstractConstructor<T> = Function & {
    prototype: T;
};
export declare type Constructor<T, A extends any[]> = {
    new (...args: A): T;
};
export declare type ServiceReference<TService extends IService = any> = symbol | AbstractConstructor<TService>;
export declare const dependenciesKey: unique symbol;
export interface IOnResolved {
    onResolved(): void;
}
export declare function hasOnResolved(obj: any): obj is IOnResolved;
export declare abstract class IServiceContainer implements IService {
    readonly serviceKey: symbol;
    abstract register(service: IService): void;
    abstract registerAs(key: ServiceReference<IService>, service: any): void;
    abstract registerUnresolved(service: IService): void;
    abstract registerUnresolvedAs(key: ServiceReference<IService>, service: any): void;
    abstract get<TService extends IService = any>(key: ServiceReference<TService>, optional?: boolean): TService | undefined;
    abstract resolve(target: any, triggerOnResolved?: boolean): void;
    abstract create<T, A extends any[]>(targetClass: Constructor<T, A>, ...args: A): T;
}
export declare class ServiceContainer extends IServiceContainer {
    private services;
    private unresolvedServices;
    constructor();
    register(service: IService): void;
    registerAs(key: ServiceReference<IService>, service: any): void;
    registerUnresolved(service: IService): void;
    registerUnresolvedAs(key: ServiceReference<IService>, service: any): void;
    get<TService extends IService = any>(key: ServiceReference<TService>, optional?: boolean): TService | undefined;
    resolve(target: any, triggerOnResolved?: boolean): void;
    create<T, A extends any[]>(targetClass: Constructor<T, A>, ...args: A): T;
}
export declare function Dependency(dependency: ServiceReference): (target: any, property: string | symbol) => void;
export declare function Dependency(target: any, property?: string | symbol): void;
