"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const querystring = require("querystring");
const RenderResponse_1 = require("./Responses/RenderResponse");
const ServiceContainer_1 = require("./ServiceContainer");
const RequestUtility_1 = require("./RequestUtility");
const JsonResponse_1 = require("./Responses/JsonResponse");
const StringResponse_1 = require("./Responses/StringResponse");
class JsonController {
    handle(request) {
        if (RequestUtility_1.contentTypeIsJson(request) && RequestUtility_1.getContentLength(request) > 0) {
            return RequestUtility_1.getRequestBody(request, 'json', this.maxBodySize)
                .then(json => this.handleJson(request, json), reason => this.handleInvalidRequest(request, reason.toString()));
        }
        else {
            return this.handleInvalidRequest(request, 'Invalid body content.');
        }
    }
    handleInvalidRequest(request, reason) {
        return new JsonResponse_1.JsonResponse({ error: reason }, 400);
    }
}
exports.JsonController = JsonController;
class PageController {
    handle(request) {
        const result = this.page(request);
        return Promise.resolve(result).then(res => this.container.create(RenderResponse_1.RenderResponse, res));
    }
}
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], PageController.prototype, "container", void 0);
exports.PageController = PageController;
class FormController {
    handle(request) {
        if (request.headers['content-type'] === 'application/x-www-form-urlencoded' &&
            RequestUtility_1.getContentLength(request) > 0) {
            return RequestUtility_1.getRequestBody(request, 'string', this.maxBodySize)
                .then(body => this.handleForm(request, querystring.parse(body)), reason => this.handleInvalidForm(request, reason.toString()));
        }
        else {
            return this.handleInvalidForm(request, 'Invalid body content.');
        }
    }
    handleInvalidForm(request, reason) {
        return new StringResponse_1.StringResponse(reason, 400);
    }
}
exports.FormController = FormController;
class FormPageController {
    handle(request) {
        if (request.method === 'GET') {
            const result = this.page(request);
            return Promise.resolve(result).then(res => this.container.create(RenderResponse_1.RenderResponse, res));
        }
        else {
            if (request.headers['content-type'] === 'application/x-www-form-urlencoded' &&
                RequestUtility_1.getContentLength(request) > 0) {
                return RequestUtility_1.getRequestBody(request, 'string', this.maxBodySize)
                    .then(body => this.page(request, querystring.parse(body)), reason => this.page(request, undefined, reason.toString()))
                    .then(res => this.container.create(RenderResponse_1.RenderResponse, res));
            }
            else {
                const result = this.page(request, undefined, 'Invalid body content.');
                return Promise.resolve(result).then(res => this.container.create(RenderResponse_1.RenderResponse, res));
            }
        }
    }
}
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], FormPageController.prototype, "container", void 0);
exports.FormPageController = FormPageController;
//# sourceMappingURL=Controller.js.map