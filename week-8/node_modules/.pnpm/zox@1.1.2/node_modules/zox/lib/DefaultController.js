"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const util = require("util");
const FileResponse_1 = require("./Responses/FileResponse");
const ServiceContainer_1 = require("./ServiceContainer");
const ConfigService_1 = require("./Services/ConfigService");
const EmptyResponse_1 = require("./Responses/EmptyResponse");
const RenderResponse_1 = require("./Responses/RenderResponse");
const statAsync = util.promisify(fs.stat);
class DefaultController {
    async handle(request) {
        let filePath = decodeURI(request.url);
        if (filePath.startsWith('/$/')) {
            filePath = filePath.substring(3);
            filePath = path.join('node_modules', filePath);
            const res = await tryServeFile(request, filePath, true);
            if (res != undefined) {
                return res;
            }
        }
        else {
            const options = this.config.getConfig('server');
            if (options.publicFiles != null) {
                const publicFiles = typeof options.publicFiles === 'string' ?
                    [options.publicFiles] :
                    options.publicFiles;
                for (const publicDir of publicFiles) {
                    const publicPath = path.join(publicDir, filePath);
                    const res = await tryServeFile(request, publicPath, false);
                    if (res != undefined) {
                        return res;
                    }
                }
            }
        }
        console.log('Route not found', request.url);
        const renderable = { toString() { return 'Not Found'; } };
        return this.container.create(RenderResponse_1.RenderResponse, renderable, 404);
    }
}
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ServiceContainer_1.IServiceContainer)
], DefaultController.prototype, "container", void 0);
__decorate([
    ServiceContainer_1.Dependency,
    __metadata("design:type", ConfigService_1.IConfigService)
], DefaultController.prototype, "config", void 0);
exports.DefaultController = DefaultController;
async function tryServeFile(request, filePath, isNodeModule) {
    let isHtml = filePath.endsWith('.html') || filePath.endsWith('.htm');
    try {
        let stats = await statAsync(filePath);
        if (!isNodeModule && stats.isDirectory()) {
            stats = undefined;
            try {
                const indexPath = path.join(filePath, 'index.html');
                stats = await statAsync(indexPath);
                filePath = indexPath;
                isHtml = true;
            }
            catch (e) { }
            if (stats == undefined) {
                try {
                    const indexPath = path.join(filePath, 'index.htm');
                    stats = await statAsync(indexPath);
                    filePath = indexPath;
                    isHtml = true;
                }
                catch (e) { }
            }
        }
        if (stats != undefined && stats.isFile()) {
            const headers = {
                'ETag': '"' + stats.ctimeMs.toString() + '"',
            };
            if (request.headers['if-none-match'] == headers.ETag) {
                return new EmptyResponse_1.EmptyResponse(304, headers);
            }
            return new FileResponse_1.FileResponse({ filePath, stats }, false, 200, headers, !isHtml);
        }
    }
    catch (e) { }
}
exports.tryServeFile = tryServeFile;
//# sourceMappingURL=DefaultController.js.map