/// <reference types="node" />
import { IService, ServiceContainer } from "./ServiceContainer";
import { BootstrapOptions } from "./index";
import { IController, MaybePromise } from "./Controller";
import { IResponse } from "./Responses/IResponse";
import { IncomingMessage } from "http";
export declare type RouteHandlerContext = {
    container: ServiceContainer;
} & IController;
export declare type RouteHandler = (this: RouteHandlerContext, request: IncomingMessage) => MaybePromise<IResponse>;
export declare class WebApp {
    private readonly options;
    private readonly container;
    private readonly pluginDiscovery;
    constructor(options?: BootstrapOptions);
    registerService(service: IService): void;
    use(pluginClass: any): void;
    listen(port: number): void;
    get(route: string, handler: RouteHandler): void;
    post(route: string, handler: RouteHandler): void;
    put(route: string, handler: RouteHandler): void;
    delete(route: string, handler: RouteHandler): void;
}
export declare function webapp(options?: BootstrapOptions): WebApp;
