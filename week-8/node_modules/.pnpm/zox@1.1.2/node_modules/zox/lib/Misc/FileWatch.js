"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const util = require("util");
const readdirAsync = util.promisify(fs.readdir);
const statAsync = util.promisify(fs.stat);
function watch(directory, handler, ms) {
    let prev = undefined;
    const check = () => {
        listFileStatsAsync(directory).then((next) => {
            if (prev !== undefined) {
                for (const pInfo of prev) {
                    const nInfo = next.find(nInfo => nInfo.filePath == pInfo.filePath);
                    if (nInfo) {
                        if (nInfo.stats.mtimeMs != pInfo.stats.mtimeMs) {
                            handler({
                                event: 'changed',
                                info: nInfo,
                            });
                        }
                    }
                    else {
                        handler({
                            event: 'removed',
                            info: pInfo,
                        });
                    }
                }
                for (const nInfo of next) {
                    const pInfo = prev.find(pInfo => pInfo.filePath == nInfo.filePath);
                    if (!pInfo) {
                        handler({
                            event: 'added',
                            info: nInfo,
                        });
                    }
                }
            }
            else {
                for (const nInfo of next) {
                    handler({
                        event: 'initial',
                        info: nInfo,
                    });
                }
            }
            prev = next;
        }, e => console.error('Error while processing file watch events:', e));
    };
    check();
    return setInterval(check, ms);
}
exports.watch = watch;
async function listFileStatsAsync(directory) {
    try {
        let files = [];
        const fileList = await readdirAsync(directory);
        for (let i = 0; i < fileList.length; ++i) {
            const filePath = path.join(directory, fileList[i]);
            try {
                const stats = await statAsync(filePath);
                const info = { filePath, stats };
                if (stats.isDirectory()) {
                    files = files.concat(await listFileStatsAsync(filePath));
                }
                else if (stats.isFile()) {
                    files.push(info);
                }
            }
            catch (e) {
            }
        }
        return files;
    }
    catch (e) {
        return [];
    }
}
exports.listFileStatsAsync = listFileStatsAsync;
//# sourceMappingURL=FileWatch.js.map