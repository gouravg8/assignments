"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const yaml = require("js-yaml");
const serviceKey = Symbol('Config');
class IConfigService {
    get serviceKey() {
        return serviceKey;
    }
}
exports.IConfigService = IConfigService;
class ConfigService {
    get serviceKey() {
        return serviceKey;
    }
    constructor(options) {
        options = options || {};
        this.defaultsPath = options.defaultsPath || 'config';
        this.overridesPath = options.overridesPath;
        this.useCache = options.useCache !== false;
        this.warnIfMissing = options.warnIfMissing !== false;
        if (this.useCache) {
            this.cache = {};
        }
    }
    getConfig(configName, invalidateCache) {
        if (!invalidateCache && this.useCache && configName in this.cache) {
            return this.cache[configName];
        }
        else {
            let config = undefined;
            if (this.overridesPath) {
                config = loadYamlOrJsonFile(path.join(this.overridesPath, configName));
            }
            if (config === undefined) {
                config = loadYamlOrJsonFile(path.join(this.defaultsPath, configName));
            }
            if (config === undefined) {
                if (this.warnIfMissing) {
                    console.warn('Config file does not exist:', configName);
                }
                config = {};
            }
            if (this.useCache) {
                this.cache[configName] = config;
            }
            return config;
        }
    }
    setConfig(configName, config) {
        const filePath = path.join(this.overridesPath || this.defaultsPath, configName);
        if (fs.existsSync(filePath + '.json')) {
            fs.writeFileSync(filePath + '.json', JSON.stringify(config));
        }
        else if (fs.existsSync(filePath + '.yml')) {
            fs.writeFileSync(filePath + '.yml', yaml.safeDump(config));
        }
        else {
            fs.writeFileSync(filePath + '.yaml', yaml.safeDump(config));
        }
        if (this.useCache) {
            this.cache[configName] = config;
        }
    }
    getGlobalConfig() {
        const config = this.getConfig('global');
        if (config.cache === undefined) {
            config.cache = true;
        }
        if (config.watch === undefined) {
            config.watch = false;
        }
        if (config.debug === undefined) {
            config.debug = false;
        }
        return config;
    }
}
exports.ConfigService = ConfigService;
function loadYamlOrJsonFile(filePath) {
    for (const ext of ['.yaml', '.yml']) {
        try {
            const thisPath = filePath.endsWith(ext) ? filePath : filePath + ext;
            const file = fs.readFileSync(thisPath, 'utf8');
            try {
                return yaml.safeLoad(file);
            }
            catch (e) {
                console.warn('Failed to parse yaml file:', filePath, '\n', e.toString());
            }
        }
        catch (e) { }
    }
    try {
        const thisPath = filePath.endsWith('.json') ? filePath : filePath + '.json';
        const file = fs.readFileSync(thisPath, 'utf8');
        try {
            return JSON.parse(file);
        }
        catch (e) {
            console.warn('Failed to parse json file:', filePath, '\n', e.toString());
        }
    }
    catch (e) { }
}
exports.loadYamlOrJsonFile = loadYamlOrJsonFile;
//# sourceMappingURL=ConfigService.js.map