import { IService } from "../ServiceContainer";
export declare type ConfigOptions = {
    defaultsPath?: string;
    overridesPath?: string;
    useCache?: boolean;
    warnIfMissing?: boolean;
};
export declare type GlobalConfig = {
    cache: boolean;
    watch: boolean;
    debug: boolean;
};
export declare abstract class IConfigService implements IService {
    readonly serviceKey: symbol;
    abstract getConfig(configName: string, invalidateCache?: boolean): any;
    abstract getGlobalConfig(): GlobalConfig;
    abstract setConfig(configName: string, config: any): void;
}
export declare class ConfigService implements IConfigService {
    readonly serviceKey: symbol;
    private readonly defaultsPath;
    private readonly overridesPath;
    private readonly useCache;
    private readonly cache;
    private readonly warnIfMissing;
    constructor(options?: ConfigOptions);
    getConfig(configName: string, invalidateCache?: boolean): any;
    setConfig(configName: string, config: any): void;
    getGlobalConfig(): GlobalConfig;
}
export declare function loadYamlOrJsonFile(filePath: string): any;
